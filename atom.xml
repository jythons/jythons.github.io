<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jythons小站]]></title>
  <link href="jythons.github.io/atom.xml" rel="self"/>
  <link href="jythons.github.io/"/>
  <updated>2023-02-20T16:02:15+08:00</updated>
  <id>jythons.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[分类问题求解（逻辑回归）]]></title>
    <link href="jythons.github.io/16762508531479.html"/>
    <updated>2023-02-13T09:14:13+08:00</updated>
    <id>jythons.github.io/16762508531479.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E5%88%86%E7%B1%BB" class="anchor" aria-hidden="true" href="#1%E5%88%86%E7%B1%BB"><span class="octicon octicon-link"></span></a>1.分类</h2>
<p>根据已知样本的某些特征，判断一个新的样本属于哪种已知的样本类。</p>
<span id="more"></span><!-- more -->
<h2><a id="2%E5%88%86%E7%B1%BB%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true" href="#2%E5%88%86%E7%B1%BB%E6%96%B9%E6%B3%95"><span class="octicon octicon-link"></span></a>2.分类方法</h2>
<h3><a id="2-1%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92" class="anchor" aria-hidden="true" href="#2-1%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92"><span class="octicon octicon-link"></span></a>2.1 逻辑回归</h3>
<p>用于解决分类问题的一种模型，根据数据特征或属性，计算其归属于某一类别的概率\(P(x)\)，根据概率数值判断其所属类别。主要应用场景：二分类问题</p>
<h4><a id="2-1-1%E6%A8%A1%E5%9E%8B%EF%BC%88%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89" class="anchor" aria-hidden="true" href="#2-1-1%E6%A8%A1%E5%9E%8B%EF%BC%88%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89"><span class="octicon octicon-link"></span></a>2.1.1 模型（数学表达式）</h4>
\[Y = {1\over 1+e^{-x}}
\]
\[y = f(x) =
\begin{cases}
1, &amp;Y \ge0.5\\
0, &amp;Y \lt0.5
\end{cases}
\]
<blockquote>
<p>y为分类结果，P为概率分布函数，x为特征值。</p>
</blockquote>
<p><img src="media/16762508531479/16762814194999.jpg" alt="" /></p>
<p>当分类任务变得复杂，例如参数是特征值是2维，3维，则模型将变为如下：</p>
\[Y = {1\over 1+e^{-g(x)}}
\]
\[g(x) = \theta_0+\theta_1x_1+\theta_2x_2
\]
<p>二阶边界函数</p>
\[g(x) = \theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_1^2+\theta_4x_2^2+\theta_5x_1x_2
\]
<p><img src="media/16762508531479/WX20230213-213003.png" alt="WX20230213-213003" /></p>
<p>也就是说，需要寻找\(g(x)\)这个边界函数（决策边界）。</p>
<h4><a id="2-1-2%E6%9C%80%E5%B0%8F%E5%8C%96%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0" class="anchor" aria-hidden="true" href="#2-1-2%E6%9C%80%E5%B0%8F%E5%8C%96%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0"><span class="octicon octicon-link"></span></a>2.1.2 最小化损失函数</h4>
<p>逻辑回归求解，最小化损失函数（J）:</p>
\[J_i =
\begin{cases}
-log(P(x_i)), &amp;if\ y_i = 1\\
-log(1-P(x_i)), &amp;if\ y_i = 0
\end{cases}
\]
<p>将上面的关系公式转换成下面的关系式，方便在计算机内执行：</p>
\[J = {1\over m}\sum_{i=1}^mJ_i = -{1\over m}
\begin{bmatrix}
\sum_{i=1}^m(y_ilog(P(x_i))+(1-y_i)log(1-P(x_i)))
\end{bmatrix}
\]
<blockquote>
<p>\(P(x)\)为上面的函数\(Y\)，\(J\)的数值越小，即模型效果越好</p>
</blockquote>
<h4><a id="2-1-3%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%AE%9E%E6%88%98" class="anchor" aria-hidden="true" href="#2-1-3%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%AE%9E%E6%88%98"><span class="octicon octicon-link"></span></a>2.1.3 逻辑回归实战</h4>
<p><strong>模型训练</strong></p>
<pre class="line-numbers"><code class="language-python">from sklearn.linear_model import LogisticRegression
lr_model = LogisticRegression()
lr_model.fit(x,y)
</code></pre>
<p><strong>边界函数系数</strong></p>
<pre class="line-numbers"><code class="language-python">theta1,theta2 = lr_model.coef_[0][0],lr_model.coef[0][1]
theta0 = lr_model.intercept_[0]
</code></pre>
<p><strong>对新数据做预测</strong></p>
<pre class="line-numbers"><code class="language-python">predictions = lr_model.predict(x_new)
</code></pre>
<p><strong>模型评估表现</strong><br />
准确率（类别正确预测的比例）</p>
<blockquote>
<p>准确率越接近1越好</p>
</blockquote>
\[Accuracy = {正确预测样本数量 \over 总样本数量}
\]
<p>第一种：计算准确率</p>
<pre class="line-numbers"><code class="language-python">from sklearn.metrics import accuaracy_score
y_predict = lr_model.predict(X)
# y是真实的值，y_predict是预测的值
accuracy = accuracy_score(y, y_predict)
</code></pre>
<p>第二种：画图看决策边界效果，可视化模型表现</p>
<pre class="line-numbers"><code class="language-python">plt.plot(X1, X2_boundary)
passed = plt.scatter(X1[mask], X2[mask])
faild = plt.scatter(X1[~mask], X2[~mask], marker='^')
</code></pre>
<h3><a id="2-2-knn%E8%BF%91%E9%82%BB%E6%A8%A1%E5%9E%8B" class="anchor" aria-hidden="true" href="#2-2-knn%E8%BF%91%E9%82%BB%E6%A8%A1%E5%9E%8B"><span class="octicon octicon-link"></span></a>2.2 KNN近邻模型</h3>
<p>选择一个点，然后寻找一定范围内距离其他点的距离，来判断属于那个类别。</p>
<h3><a id="2-3%E5%86%B3%E7%AD%96%E6%A0%91" class="anchor" aria-hidden="true" href="#2-3%E5%86%B3%E7%AD%96%E6%A0%91"><span class="octicon octicon-link"></span></a>2.3 决策树</h3>
<p>通过询问一些问题，来最终判定属于那个类别。</p>
<h3><a id="2-4%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" class="anchor" aria-hidden="true" href="#2-4%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C"><span class="octicon octicon-link"></span></a>2.4 神经网络</h3>
<h2><a id="3%E9%99%84%E5%BD%95" class="anchor" aria-hidden="true" href="#3%E9%99%84%E5%BD%95"><span class="octicon octicon-link"></span></a>3.附录</h2>
<h3><a id="3-1%E5%9B%BE%E5%BD%A2%E5%B1%95%E7%A4%BA" class="anchor" aria-hidden="true" href="#3-1%E5%9B%BE%E5%BD%A2%E5%B1%95%E7%A4%BA"><span class="octicon octicon-link"></span></a>3.1 图形展示</h3>
<h4><a id="3-1-1%E5%8C%BA%E5%88%86%E7%B1%BB%E5%88%AB%E7%9A%84%E6%95%A3%E7%82%B9%E5%9B%BE" class="anchor" aria-hidden="true" href="#3-1-1%E5%8C%BA%E5%88%86%E7%B1%BB%E5%88%AB%E7%9A%84%E6%95%A3%E7%82%B9%E5%9B%BE"><span class="octicon octicon-link"></span></a>3.1.1 区分类别的散点图</h4>
<pre class="line-numbers"><code class="language-python">mask = y == 1
passed = plt.scatter(X1[mask], X2[mask])
failed = plt.scatter(X1[~mask], X2[~mask], marker='^')
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线性回归问题求解]]></title>
    <link href="jythons.github.io/16753064247480.html"/>
    <updated>2023-02-02T10:53:44+08:00</updated>
    <id>jythons.github.io/16753064247480.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<h2><a id="%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%85%AC%E5%BC%8F" class="anchor" aria-hidden="true" href="#%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%85%AC%E5%BC%8F"><span class="octicon octicon-link"></span></a>损失函数公式</h2>
\[J(a,b)= {1\over 2m}\sum_{i=1}^m(\hat y^{(i)}-y^{(i)})^2 = {1\over 2m}\sum_{i=1}^m(ax_i+b-y_i)^2 = g(a, b)
\]
<h2><a id="%E9%87%8D%E5%A4%8D%E8%AE%A1%E7%AE%97%E7%9B%B4%E5%88%B0%E6%94%B6%E6%95%9B%EF%BC%88%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%89" class="anchor" aria-hidden="true" href="#%E9%87%8D%E5%A4%8D%E8%AE%A1%E7%AE%97%E7%9B%B4%E5%88%B0%E6%94%B6%E6%95%9B%EF%BC%88%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%89"><span class="octicon octicon-link"></span></a>重复计算直到收敛（梯度下降）</h2>
<p>设置两个临时变量</p>
\[temp_a = a - \alpha{\delta\over \delta a}g(a,b) = a - \alpha{1\over m}\sum_{i=1}^m(ax_i+b-y_i)x_i

\]
\[temp_b = b - \alpha{\delta\over \delta b}g(a,b) = b - \alpha{1\over m}\sum_{i=1}^m(ax_i+b-y_i)

\]
\[a = temp_a
\]
\[b = temp_b
\]
<blockquote>
<p>\(\alpha\)是步长，\({\delta\over \delta b}g(a,b)\) 是损失函数，该方式就是找到损失函数最小值对应的a和b的值</p>
</blockquote>
<h2><a id="scikit-learn" class="anchor" aria-hidden="true" href="#scikit-learn"><span class="octicon octicon-link"></span></a>Scikit-learn</h2>
<h3><a id="%E5%9C%B0%E5%9D%80" class="anchor" aria-hidden="true" href="#%E5%9C%B0%E5%9D%80"><span class="octicon octicon-link"></span></a>地址</h3>
<p><a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a></p>
<h3><a id="%E7%89%B9%E7%82%B9" class="anchor" aria-hidden="true" href="#%E7%89%B9%E7%82%B9"><span class="octicon octicon-link"></span></a>特点</h3>
<ul>
<li>集成了机器学习中各类成熟的算法，容易安装和适应，样例丰富，教程和文档也非常详细</li>
<li>不支持Python之外的语言，不支持深度学习和强化学习</li>
</ul>
<h3><a id="%E8%B0%83%E7%94%A8sklearn%E6%B1%82%E8%A7%A3%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98" class="anchor" aria-hidden="true" href="#%E8%B0%83%E7%94%A8sklearn%E6%B1%82%E8%A7%A3%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98"><span class="octicon octicon-link"></span></a>调用Sklearn求解线性回归问题</h3>
\[y = 2x + 5
\]
<table>
<thead>
<tr>
<th>X</th>
<th>Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td>9</td>
</tr>
<tr>
<td>3</td>
<td>11</td>
</tr>
<tr>
<td>4</td>
<td>13</td>
</tr>
<tr>
<td>5</td>
<td>15</td>
</tr>
</tbody>
</table>
<h4><a id="%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true" href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95"><span class="octicon octicon-link"></span></a>使用方法</h4>
<pre class="line-numbers"><code class="language-python">寻找a、b（y = ax + b）
from sklearn.linear_model import LinearRegression
lr_model = LinearRegression()
lr_model.fit(x,y)

展示a、b:
a = lr_model.coef_
b = lr_model.intercept_

对新的数据做预测:
predictions = lr_model.predict(x_new)
</code></pre>
<h4><a id="%E8%AF%84%E4%BC%B0%E6%A8%A1%E5%9E%8B%E8%A1%A8%E7%8E%B0" class="anchor" aria-hidden="true" href="#%E8%AF%84%E4%BC%B0%E6%A8%A1%E5%9E%8B%E8%A1%A8%E7%8E%B0"><span class="octicon octicon-link"></span></a>评估模型表现</h4>
<p>\(y\)与\(\hat y\)的均方误差（MSE）：</p>
\[MSE = {1\over m}\sum_{i=1}^m(\hat y-y)^2
\]
<blockquote>
<p>均方误差（MSE）越小，模型拟合越好</p>
</blockquote>
<p>R方值（\(R^2\)）:</p>
\[R^2 = 1 - {\sum_{i=1}^m(\hat y_i-y_i)^2\over \sum_{i=1}^m(y_i-\overline y_i)^2} = 1 - {MSE \over 方差}
\]
<blockquote>
<p>\(R^2\)分数越接近1越好</p>
</blockquote>
<h5><a id="%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true" href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95"><span class="octicon octicon-link"></span></a>使用方法</h5>
<p>1.计算\(y\)与\(\hat y\)的均方误差（MSE）、R方值（R2_score）:</p>
<pre class="line-numbers"><code class="language-python">from sklearn.metrics import mean_squared_error,r2_socre
# y是实际的值，y_predict是预测值
MSE = mean_squared_error(y,y_predict) 
R2 = r2_score(y,y_predict)
</code></pre>
<p>2.画图对比\(y\)与\(\hat y\)，可视化模型表现：</p>
<pre class="line-numbers"><code class="language-python">from matplotlib import pyplot as plt
plt.scatter(y, y_predict)
</code></pre>
<h2><a id="%E5%9B%BE%E5%BD%A2%E5%B1%95%E7%A4%BA" class="anchor" aria-hidden="true" href="#%E5%9B%BE%E5%BD%A2%E5%B1%95%E7%A4%BA"><span class="octicon octicon-link"></span></a>图形展示</h2>
<h3><a id="%E7%94%BB%E6%95%A3%E7%82%B9%E5%9B%BE" class="anchor" aria-hidden="true" href="#%E7%94%BB%E6%95%A3%E7%82%B9%E5%9B%BE"><span class="octicon octicon-link"></span></a>画散点图</h3>
<pre class="line-numbers"><code class="language-python">import matyplotlib.pyplot as plt
plt.scatter(x,y)
</code></pre>
<h3><a id="%E5%A4%9A%E5%BC%A0%E5%9B%BE%E5%90%8C%E6%97%B6%E5%B1%95%E7%A4%BA" class="anchor" aria-hidden="true" href="#%E5%A4%9A%E5%BC%A0%E5%9B%BE%E5%90%8C%E6%97%B6%E5%B1%95%E7%A4%BA"><span class="octicon octicon-link"></span></a>多张图同时展示</h3>
<pre class="line-numbers"><code class="language-python">import matyplotlib.pyplot as plt
fig1 = plt.subplot(211)
plt.scatter(x1, y1)
fig2 = plt.subplot(212)
plt.scatter(x2, y2)
</code></pre>
<h2><a id="%E5%AE%9E%E6%88%98%E4%BB%A3%E7%A0%81" class="anchor" aria-hidden="true" href="#%E5%AE%9E%E6%88%98%E4%BB%A3%E7%A0%81"><span class="octicon octicon-link"></span></a>实战代码</h2>
<blockquote>
<p>使用线性回归预测房价，基于多因子预测</p>
</blockquote>
<p>测试数据
<img src="media/16753064247480/WX20230210-094930@2x.png" alt="WX20230210-094930@2x" /></p>
<pre class="line-numbers"><code class="language-python">import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from sklearn.linear_model import LinearRegression

// 加载数据，并查看数据是否加载成功
data = pd.read_csv('usa_housing_price.csv');
data.head()

// 图形化展示数据
%matplotlib inline
// 创建一个10x10的画布
fig = plt.figure(figsize=(10,10))

// 绘制2行3列的第1个图
fig1 = plt.subplot(231)
// scatter表示绘制散点图
// Avg. Area Income是数据列名称
plt.scatter(data.loc[:,'Avg. Area Income'],data.loc[:,'Price'])
plt.title('Price VS Income')

fig2 =plt.subplot(232)
plt.scatter(data.loc[:,'Avg. Area House Age'],data.loc[:,'Price'])
plt.title('Price VS House Age')

fig3 =plt.subplot(233)
plt.scatter(data.loc[:,'Avg. Area Number of Rooms'],data.loc[:,'Price'])
plt.title('Price VS Number of Rooms')

fig4 =plt.subplot(234)
plt.scatter(data.loc[:,'Area Population'],data.loc[:,'Price'])
plt.title('Price VS Area Population')

fig5 =plt.subplot(235)
plt.scatter(data.loc[:,'size'],data.loc[:,'Price'])
plt.title('Price VS size')
plt.show()

// 获取多因子数据（除了房价，都是输入因子）
X_multi = data.drop(['Price'],axis=1)
// 实例化一个线性回归模型
LR_multi = LinearRegression()
// 训练模型，X_multi是多因子输入数据，y是结果数据
LR_multi.fit(X_multi,y)
// 使用模型预测多因子参数X_multi对应的预测结果数据
y_predict_multi = LR_multi.predict(X_multi)

// 检查模型效果, mse越小或r2越接近1，模型表现越好
mse = mean_squared_error(y,y_predict_multi)
r2 = r2_score(y,y_predict_multi)

// 数据新数据，获得预测结果
X_test = [65000,5,5,30000,200]
X_test = np.array(X_test).reshape(1,-1)
y_test_predict = LR_multi.predict(X_test)
print(y_test_predict)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jupyter 开启代码提示]]></title>
    <link href="jythons.github.io/16740299909794.html"/>
    <updated>2023-01-18T16:19:50+08:00</updated>
    <id>jythons.github.io/16740299909794.html</id>
    <content type="html"><![CDATA[
<p>在当前环境下命令终端执行一下命令</p>
<p>代码提示功能需要装插件</p>
<p>1.打开 Anaconda Navigator，点击 Environments -&gt; base (root) -&gt; Open Terminal</p>
<p>2.在命令终端里依次执行如下命令</p>
<pre class="line-numbers"><code>pip3 install jupyter_contrib_nbextensions -i https://pypi.tuna.tsinghua.edu.cn/simple
jupyter contrib nbextension install --user
pip3 install jupyter_nbextensions_configurator -i https://pypi.tuna.tsinghua.edu.cn/simple
jupyter nbextensions_configurator enable --user
</code></pre>
<p>安装完成后打开Jupyter Notebook。此时可以看到菜单项上（与Files、Running等一行）增加了一个Nbextensions；点击Nbextensions进行配置如图，勾选Hinterland</p>
<p>————————————————
版权声明：本文为CSDN博主「小明同学YYDS」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：<a href="https://blog.csdn.net/maoyuanming0806/article/details/109744284">https://blog.csdn.net/maoyuanming0806/article/details/109744284</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发工具使用中异常解决]]></title>
    <link href="jythons.github.io/16740290336448.html"/>
    <updated>2023-01-18T16:03:53+08:00</updated>
    <id>jythons.github.io/16740290336448.html</id>
    <content type="html"><![CDATA[
<h2><a id="mac%E4%B8%8B%E6%8A%A5%E9%94%99" class="anchor" aria-hidden="true" href="#mac%E4%B8%8B%E6%8A%A5%E9%94%99"><span class="octicon octicon-link"></span></a>Mac下报错</h2>
<h3><a id="%E9%97%AE%E9%A2%98" class="anchor" aria-hidden="true" href="#%E9%97%AE%E9%A2%98"><span class="octicon octicon-link"></span></a>问题</h3>
<pre class="line-numbers"><code>Unable to revert mtime: /Library/Fonts
Fontconfig warning: ignoring UTF-8: not a valid region tag
</code></pre>
<h3><a id="%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" class="anchor" aria-hidden="true" href="#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95"><span class="octicon octicon-link"></span></a>解决办法</h3>
<pre class="line-numbers"><code>brew install libmagic
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习入门]]></title>
    <link href="jythons.github.io/16715444528067.html"/>
    <updated>2022-12-20T21:54:12+08:00</updated>
    <id>jythons.github.io/16715444528067.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0" class="anchor" aria-hidden="true" href="#%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0"><span class="octicon octicon-link"></span></a>监督学习</h2>
<p>分类算法和线性回归算法
线性函数：</p>
\[F=wx+b
\]
<p>成本公式：</p>
\[J(w,b)= {1\over 2m}\sum_{i=1}^m(\hat y^{(i)}-y^{(i)})^2
\]
<p>当 \(J(w,b)\) 函数趋近于0时，所得到到线性函数就是最优的。</p>
<h3><a id="%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95" class="anchor" aria-hidden="true" href="#%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95"><span class="octicon octicon-link"></span></a>梯度下降法</h3>
<h4><a id="%E6%B8%90%E5%8F%98%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95" class="anchor" aria-hidden="true" href="#%E6%B8%90%E5%8F%98%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95"><span class="octicon octicon-link"></span></a>渐变下降算法</h4>
\[w = w-\alpha{\delta\over \delta w}{J(w,b)}
\]
\[b = b-\alpha{\delta\over \delta b}{J(w,b)}
\]
<blockquote>
<ol>
<li>\(\alpha\) 代表学习率，通常是一个0-1的正数，如果  \(\alpha\) 很大，说明梯度下降的很快，如果很小，说明下降的幅度很小</li>
</ol>
</blockquote>
<h2><a id="%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0" class="anchor" aria-hidden="true" href="#%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0"><span class="octicon octicon-link"></span></a>非监督学习</h2>
<p>聚类算法</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL类型与Java类型对应转换]]></title>
    <link href="jythons.github.io/16672900560432.html"/>
    <updated>2022-11-01T16:07:36+08:00</updated>
    <id>jythons.github.io/16672900560432.html</id>
    <content type="html"><![CDATA[
<p><a href="https://blog.csdn.net/java_2017_csdn/article/details/80910223">https://blog.csdn.net/java_2017_csdn/article/details/80910223</a></p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>显示长度</th>
<th>数据库类型</th>
<th>JAVA类型</th>
<th>JDBC类型索引（int）</th>
</tr>
</thead>
<tbody>
<tr>
<td>VARCHAR</td>
<td>L+N</td>
<td>VARCHAR</td>
<td>java.lang.String</td>
<td>12</td>
</tr>
<tr>
<td>CHAR</td>
<td>N</td>
<td>CHAR</td>
<td>java.lang.String</td>
<td>1</td>
</tr>
<tr>
<td>BLOB</td>
<td>L+N</td>
<td>BLOB</td>
<td>java.lang.byte[]</td>
<td>-4</td>
</tr>
<tr>
<td>TEXT</td>
<td>65535</td>
<td>VARCHAR</td>
<td>java.lang.String</td>
<td>-1</td>
</tr>
<tr>
<td>INTEGER</td>
<td>4</td>
<td>INTEGER UNSIGNED</td>
<td>java.lang.Long</td>
<td>4</td>
</tr>
<tr>
<td>TINYINT</td>
<td>3</td>
<td>TINYINT UNSIGNED</td>
<td>java.lang.Integer</td>
<td>-6</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>5</td>
<td>SMALLINT UNSIGNED</td>
<td>java.lang.Integer</td>
<td>5</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>8</td>
<td>MEDIUMINT UNSIGNED</td>
<td>java.lang.Integer</td>
<td>4</td>
</tr>
<tr>
<td>BIT</td>
<td>1</td>
<td>BIT</td>
<td>java.lang.Boolean</td>
<td>-7</td>
</tr>
<tr>
<td>BIGINT</td>
<td>20</td>
<td>BIGINT UNSIGNED</td>
<td>java.math.BigInteger</td>
<td>-5</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4+8</td>
<td>FLOAT</td>
<td>java.lang.Float</td>
<td>7</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>22</td>
<td>DOUBLE</td>
<td>java.lang.Double</td>
<td>8</td>
</tr>
<tr>
<td>DECIMAL</td>
<td>11</td>
<td>DECIMAL</td>
<td>java.math.BigDecimal</td>
<td>3</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>1</td>
<td>同TINYINT</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ID</td>
<td>11</td>
<td>PK (INTEGER UNSIGNED)</td>
<td>java.lang.Long</td>
<td>4</td>
</tr>
<tr>
<td>DATE</td>
<td>10</td>
<td>DATE</td>
<td>java.sql.Date</td>
<td>91</td>
</tr>
<tr>
<td>TIME</td>
<td>8</td>
<td>TIME</td>
<td>java.sql.Time</td>
<td>92</td>
</tr>
<tr>
<td>DATETIME</td>
<td>19</td>
<td>DATETIME</td>
<td>java.sql.Timestamp</td>
<td>93</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>19</td>
<td>TIMESTAMP</td>
<td>java.sql.Timestamp</td>
<td>93</td>
</tr>
<tr>
<td>YEAR</td>
<td>4</td>
<td>YEAR</td>
<td>java.sql.Date</td>
<td>91</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[位图记录的数据，统计每个位上的数据]]></title>
    <link href="jythons.github.io/16643679322289.html"/>
    <updated>2022-09-28T20:25:32+08:00</updated>
    <id>jythons.github.io/16643679322289.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<pre class="line-numbers"><code class="language-sql">select count(*) from (
select user_id,
right(concat('00000',bin(task_res)), 6) as b, 
SUBSTRING(right(concat('00000',bin(task_res)), 6), 1,1) as zhucejianhangshenghuo,
SUBSTRING(right(concat('00000',bin(task_res)), 6), 2,1) as jianhangshenghuoxiaofei,
SUBSTRING(right(concat('00000',bin(task_res)), 6), 3,1) as weixinyinhang,
SUBSTRING(right(concat('00000',bin(task_res)), 6), 4,1) as longzhifu3,
SUBSTRING(right(concat('00000',bin(task_res)), 6), 5,1) as xinyongka66,
SUBSTRING(right(concat('00000',bin(task_res)), 6), 6,1) as longzhifu50
from tab_name where task_res&gt;0
) as tab where weixinyinhang=1
</code></pre>
<h2><a id="%E8%A7%A3%E6%9E%90" class="anchor" aria-hidden="true" href="#%E8%A7%A3%E6%9E%90"><span class="octicon octicon-link"></span></a>解析</h2>
<ol>
<li>首先先将使用位图记录数据的字段转换为2进制，因为当前使用最多位数为6位，使用mysql 的bin方法转换时，转后的二进制不足6位的前面不会补0，因此，在前面使用字符串拼接的方式补0，然后再从右边截取6位，这样就可以获取到长度为6的二进制数据了</li>
<li>然后再将二进制字符串的每个位分解为单独的列，通过子查询的方式统计每个指标完成的数量即可</li>
</ol>
<h2><a id="%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90" class="anchor" aria-hidden="true" href="#%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90"><span class="octicon octicon-link"></span></a>使用函数解析</h2>
<p><strong>1. bin(number)</strong><br />
将整形的数值类型字段转换为二进制</p>
<p><strong>2. concat(string, string, ...)</strong><br />
将多个字符串拼接成一个字符串</p>
<p><strong>3. right(string, number)</strong><br />
从右边截取字符串string，截取number个字符</p>
<p><strong>4. SUBSTRING(string, startIndex, number)</strong><br />
截取字符串string，从第startIndex个字符开始截取，截取number个字符</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决mysql没有root用户问题]]></title>
    <link href="jythons.github.io/16636626054103.html"/>
    <updated>2022-09-20T16:30:05+08:00</updated>
    <id>jythons.github.io/16636626054103.html</id>
    <content type="html"><![CDATA[
<p>先说这个问题产生的影响，这个跟解题有关，有必要说明，我的user表没有任何一个用户，包括root，所以一开始我要给权限，方便后续操作：</p>
<pre class="line-numbers"><code>vim /etc/my.cnf
skip-grant-tables     #在[mysqld]下面添加这一行，忽略权限表
</code></pre>
<p>然后重启mysql：</p>
<pre class="line-numbers"><code>/etc/init.d/mysqld restart
</code></pre>
<p>先说解决步骤：<br />
1.创建root用户<br />
2.给予root所有权限<br />
过程：<br />
1.创建root用户：</p>
<pre class="line-numbers"><code>create user 'root'@'localhost' identified by '123457';
</code></pre>
<p>localhost表示本地，mysql登入的时候，不用指定ip登入</p>
<p>此步骤可能会报以下错误，没报错的跳过（直接到权限那一步），用一下方法解决：</p>
<pre class="line-numbers"><code>ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement
</code></pre>
<p>输入：</p>
<pre class="line-numbers"><code>flush privileges；
</code></pre>
<p>此时再次重新创建用户：</p>
<pre class="line-numbers"><code>create user 'root'@'localhost' identified by '123457';
</code></pre>
<p>如果再次报错，这步没报错的也是直接跳到赋予权限那一步，报错的以下操作：</p>
<pre class="line-numbers"><code>drop user 'root'@'localhost';
</code></pre>
<p>再次重新创建用户：</p>
<pre class="line-numbers"><code>create user 'root'@'localhost' identified by '123457';
</code></pre>
<p>结果没有再报错，root用户创建成功。
下面赋予root权限：</p>
<pre class="line-numbers"><code>#赋予所有库所有表操作权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;
 
flush privileges;
 
exit
</code></pre>
<p>到这一步没有报错，表明已经成功了，不过要把最开始的配置文件恢复：</p>
<pre class="line-numbers"><code>#删除配置文件中的
vim /etc/my.cnf
skip-grant-tables
</code></pre>
<p>退出，重启mysql：</p>
<pre class="line-numbers"><code>/etc/init.d/mysqld restart
</code></pre>
<p>最后，测试：</p>
<pre class="line-numbers"><code>mysql -uroot -p123457   #可以登入的话，表示前面的操作没问题
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不保留本地修改]]></title>
    <link href="jythons.github.io/16602701188846.html"/>
    <updated>2022-08-12T10:08:38+08:00</updated>
    <id>jythons.github.io/16602701188846.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E8%83%8C%E6%99%AF" class="anchor" aria-hidden="true" href="#1%E8%83%8C%E6%99%AF"><span class="octicon octicon-link"></span></a>1.背景</h2>
<p>当前分支代码做了一些没用的修改甚至还commit了，不保留本地的修改。</p>
<h2><a id="2%E6%93%8D%E4%BD%9C" class="anchor" aria-hidden="true" href="#2%E6%93%8D%E4%BD%9C"><span class="octicon octicon-link"></span></a>2.操作</h2>
<ul>
<li>先同步远端信息</li>
</ul>
<pre class="line-numbers"><code class="language-bash">git fetch --all
</code></pre>
<ul>
<li>可以通过将本地的git指针指向远端某个分支</li>
</ul>
<pre class="line-numbers"><code class="language-bash">git reset --hard origin/远端分支名
</code></pre>
<ul>
<li>再pull更新本地代码</li>
</ul>
<pre class="line-numbers"><code class="language-bash">git pull origin 远端分支名
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Npm源修改]]></title>
    <link href="jythons.github.io/16576035901040.html"/>
    <updated>2022-07-12T13:26:30+08:00</updated>
    <id>jythons.github.io/16576035901040.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E8%83%8C%E6%99%AF" class="anchor" aria-hidden="true" href="#1%E8%83%8C%E6%99%AF"><span class="octicon octicon-link"></span></a>1. 背景</h2>
<p>刚安装好nodejs环境时，由于npm的源默认是官方源，国内访问部分依赖包的时候，被墙，为了加快安装，国内有很多npm源可以选择，比较有名的就是淘宝npm镜像。</p>
<h2><a id="2%E4%B8%B4%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E6%BA%90" class="anchor" aria-hidden="true" href="#2%E4%B8%B4%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E6%BA%90"><span class="octicon octicon-link"></span></a>2. 临时使用淘宝源</h2>
<p>在 npm install XXX 时加入--registry URL即可，不会影响到本地配置，如：</p>
<pre class="line-numbers"><code>npm install 包名 --registry https://registry.npm.taobao.org 
</code></pre>
<h2><a id="3%E6%8C%81%E4%B9%85%E4%BD%BF%E7%94%A8" class="anchor" aria-hidden="true" href="#3%E6%8C%81%E4%B9%85%E4%BD%BF%E7%94%A8"><span class="octicon octicon-link"></span></a>3. 持久使用</h2>
<p>永久修改本地npm的配置：</p>
<pre class="line-numbers"><code>npm config set registry https://registry.npm.taobao.org
</code></pre>
<h2><a id="4%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4" class="anchor" aria-hidden="true" href="#4%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4"><span class="octicon octicon-link"></span></a>4. 其他命令</h2>
<p>查看npm源地址有没有换成功：</p>
<pre class="line-numbers"><code>npm config get registry
</code></pre>
<h2><a id="5%E9%87%8D%E7%BD%AE%E4%B8%BA%E5%AE%98%E6%96%B9%E6%BA%90" class="anchor" aria-hidden="true" href="#5%E9%87%8D%E7%BD%AE%E4%B8%BA%E5%AE%98%E6%96%B9%E6%BA%90"><span class="octicon octicon-link"></span></a>5. 重置为官方源</h2>
<pre class="line-numbers"><code>npm config set registry https://registry.npmjs.org/
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel动态创建表]]></title>
    <link href="jythons.github.io/16575934400731.html"/>
    <updated>2022-07-12T10:37:20+08:00</updated>
    <id>jythons.github.io/16575934400731.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-php">if(!Schema::hasTable(‘表名称’)){ //添加前检测表是否存在
Schema::create(‘表名称’, function ($table) { //添加表
$table-&gt;increments(‘id’); //主键
$table-&gt;string(‘name’); //列名
//字段类型
$table-&gt;bigIncrements(‘id’); 自增ID，类型为bigint
$table-&gt;bigInteger(‘votes’); 等同于数据库中的BIGINT类型
$table-&gt;binary(‘data’); 等同于数据库中的BLOB类型
$table-&gt;boolean(‘confirmed’); 等同于数据库中的BOOLEAN类型
$table-&gt;char(‘name’, 4); 等同于数据库中的CHAR类型
$table-&gt;date(‘created_at’); 等同于数据库中的DATE类型
$table-&gt;dateTime(‘created_at’); 等同于数据库中的DATETIME类型
$table-&gt;dateTimeTz(‘created_at’); 等同于数据库中的DATETIME类型（带时区）
$table-&gt;decimal(‘amount’, 5, 2); 等同于数据库中的DECIMAL类型，带一个精度和范围
$table-&gt;double(‘column’, 15, 8); 等同于数据库中的DOUBLE类型，带精度, 总共15位数字，小数点后8位.
$table-&gt;enum(‘choices’, [‘foo’, ‘bar’]); 等同于数据库中的 ENUM类型
$table-&gt;float(‘amount’); 等同于数据库中的 FLOAT 类型
$table-&gt;increments(‘id’); 数据库主键自增ID
$table-&gt;integer(‘votes’); 等同于数据库中的 INTEGER 类型
$table-&gt;ipAddress(‘visitor’); 等同于数据库中的 IP 地址
$table-&gt;json(‘options’); 等同于数据库中的 JSON 类型
$table-&gt;jsonb(‘options’); 等同于数据库中的 JSONB 类型
$table-&gt;longText(‘description’); 等同于数据库中的 LONGTEXT 类型
$table-&gt;macAddress(‘device’); 等同于数据库中的 MAC 地址
$table-&gt;mediumIncrements(‘id’); 自增ID，类型为无符号的mediumint
$table-&gt;mediumInteger(‘numbers’); 等同于数据库中的 MEDIUMINT类型
$table-&gt;mediumText(‘description’); 等同于数据库中的 MEDIUMTEXT类型
$table-&gt;morphs(‘taggable’); 添加一个 INTEGER类型的 taggable_id 列和一个 STRING类型的 taggable_type列
$table-&gt;nullableTimestamps(); 和 timestamps()一样但允许 NULL值.
$table-&gt;rememberToken(); 添加一个 remember_token 列： VARCHAR(100) NULL.
$table-&gt;smallIncrements(‘id’); 自增ID，类型为无符号的smallint
$table-&gt;smallInteger(‘votes’); 等同于数据库中的 SMALLINT 类型
$table-&gt;softDeletes(); 新增一个 deleted_at 列 用于软删除.
$table-&gt;string(‘email’); 等同于数据库中的 VARCHAR 列 .
$table-&gt;string(‘name’, 100); 等同于数据库中的 VARCHAR，带一个长度
$table-&gt;text(‘description’); 等同于数据库中的 TEXT 类型
$table-&gt;time(‘sunrise’); 等同于数据库中的 TIME类型
$table-&gt;timeTz(‘sunrise’); 等同于数据库中的 TIME 类型（带时区）
$table-&gt;tinyInteger(‘numbers’); 等同于数据库中的 TINYINT 类型
$table-&gt;timestamp(‘added_on’); 等同于数据库中的 TIMESTAMP 类型
$table-&gt;timestampTz(‘added_on’); 等同于数据库中的 TIMESTAMP 类型（带时区）
$table-&gt;timestamps(); 添加 created_at 和 updated_at列
$table-&gt;timestampsTz(); 添加 created_at 和 updated_at列（带时区）
$table-&gt;unsignedBigInteger(‘votes’); 等同于数据库中无符号的 BIGINT 类型
$table-&gt;unsignedInteger(‘votes’); 等同于数据库中无符号的 INT 类型
$table-&gt;unsignedMediumInteger(‘votes’); 等同于数据库中无符号的 MEDIUMINT 类型
$table-&gt;unsignedSmallInteger(‘votes’); 等同于数据库中无符号的 SMALLINT 类型
$table-&gt;unsignedTinyInteger(‘votes’); 等同于数据库中无符号的 TINYINT 类型
$table-&gt;uuid(‘id’); 等同于数据库的UUID
</code></pre>
<pre class="line-numbers"><code class="language-php">默认等等：
-&gt;after(‘column’) 将该列置于另一个列之后 (仅适用于MySQL)
-&gt;comment(‘my comment’) 添加注释信息
-&gt;default( v a l u e ) 指 定 列 的 默 认 值 − &amp;gt; f i r s t ( ) 将 该 列 置 为 表 中 第 一 个 列 ( 仅 适 用 于 M y S Q L ) − &amp;gt; n u l l a b l e ( ) 允 许 该 列 的 值 为 N U L L − &amp;gt; s t o r e d A s ( value) 指定列的默认值 -&amp;gt;first() 将该列置为表中第一个列 (仅适用于MySQL) -&amp;gt;nullable() 允许该列的值为NULL -&amp;gt;storedAs( value)指定列的默认值−&gt;first()将该列置为表中第一个列(仅适用于MySQL)−&gt;nullable()允许该列的值为NULL−&gt;storedAs(expression) 创建一个存储生成列（只支持MySQL）
-&gt;unsigned() 设置 integer 列为 UNSIGNED
-&gt;virtualAs($expression) 创建一个虚拟生成列（只支持MySQL）

索引等等
可用索引类型：

命令 描述
$table-&gt;primary(‘id’); 添加主键索引
$table-&gt;primary([‘first’, ‘last’]); 添加混合索引
$table-&gt;unique(‘email’); 添加唯一索引
$table-&gt;unique(‘state’, ‘my_index_name’); 指定自定义索引名称，如果不指定，laravel会自动给它起 个名字
$table-&gt;index(‘state’); 添加普通索引
删除索引：

命令 描述
$table-&gt;dropPrimary(‘users_id_primary’); 从 “users”表中删除主键索引
$table-&gt;dropUnique(‘users_email_unique’); 从 “users”表中删除唯一索引
$table-&gt;dropIndex(‘geo_state_index’); 从 “geo”表中删除普通索引
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨域]]></title>
    <link href="jythons.github.io/16570024842451.html"/>
    <updated>2022-07-05T14:28:04+08:00</updated>
    <id>jythons.github.io/16570024842451.html</id>
    <content type="html"><![CDATA[
<p>CORS是一个W3C标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）。
它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。
本文详细介绍CORS的内部机制。</p>
<h2><a id="%E4%B8%80%E3%80%81%E7%AE%80%E4%BB%8B" class="anchor" aria-hidden="true" href="#%E4%B8%80%E3%80%81%E7%AE%80%E4%BB%8B"><span class="octicon octicon-link"></span></a>一、简介</h2>
<p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<h2><a id="%E4%BA%8C%E3%80%81%E4%B8%A4%E7%A7%8D%E8%AF%B7%E6%B1%82" class="anchor" aria-hidden="true" href="#%E4%BA%8C%E3%80%81%E4%B8%A4%E7%A7%8D%E8%AF%B7%E6%B1%82"><span class="octicon octicon-link"></span></a>二、两种请求</h2>
<p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
<p>只要同时满足以下两大条件，就属于简单请求。</p>
<p>（1) 请求方法是以下三种方法之一：</p>
<pre class="line-numbers"><code>HEAD
GET
POST
</code></pre>
<p>（2）HTTP的头信息不超出以下几种字段：</p>
<pre class="line-numbers"><code>Accept
Accept-Language
Content-Language
Last-Event-ID
</code></pre>
<p>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain
这是为了兼容表单（form），因为历史上表单一直可以发出跨域请求。AJAX 的跨域设计就是，只要表单可以发，AJAX 就可以直接发。</p>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理，是不一样的。</p>
<h2><a id="%E4%B8%89%E3%80%81%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82" class="anchor" aria-hidden="true" href="#%E4%B8%89%E3%80%81%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82"><span class="octicon octicon-link"></span></a>三、简单请求</h2>
<h3><a id="3-1%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B" class="anchor" aria-hidden="true" href="#3-1%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B"><span class="octicon octicon-link"></span></a>3.1 基本流程</h3>
<p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p>
<p>下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。</p>
<pre class="line-numbers"><code>GET /cors HTTP/1.1
Origin: http://api.bob.com
Host: api.alice.com
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
</code></pre>
<p>上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>
<p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p>
<p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>
<p>Access-Control-Allow-Origin: <a href="http://api.bob.com">http://api.bob.com</a>
Access-Control-Allow-Credentials: true
Access-Control-Expose-Headers: FooBar
Content-Type: text/html; charset=utf-8
上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头。</p>
<p>（1）Access-Control-Allow-Origin</p>
<p>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p>
<p>（2）Access-Control-Allow-Credentials</p>
<p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p>
<p>（3）Access-Control-Expose-Headers</p>
<p>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader('FooBar')可以返回FooBar字段的值。</p>
<h3><a id="3-2-withcredentials%E5%B1%9E%E6%80%A7" class="anchor" aria-hidden="true" href="#3-2-withcredentials%E5%B1%9E%E6%80%A7"><span class="octicon octicon-link"></span></a>3.2 withCredentials 属性</h3>
<p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。</p>
<p>Access-Control-Allow-Credentials: true</p>
<p>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</p>
<p>var xhr = new XMLHttpRequest();
xhr.withCredentials = true;
否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>
<p>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p>
<p>xhr.withCredentials = false;
需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p>
<h2><a id="%E5%9B%9B%E3%80%81%E9%9D%9E%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82" class="anchor" aria-hidden="true" href="#%E5%9B%9B%E3%80%81%E9%9D%9E%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82"><span class="octicon octicon-link"></span></a>四、非简单请求</h2>
<h3><a id="4-1%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82" class="anchor" aria-hidden="true" href="#4-1%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82"><span class="octicon octicon-link"></span></a>4.1 预检请求</h3>
<p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</p>
<p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为&quot;预检&quot;请求（preflight）。</p>
<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p>
<p>下面是一段浏览器的JavaScript脚本。</p>
<pre class="line-numbers"><code>var url = 'http://api.alice.com/cors';
var xhr = new XMLHttpRequest();
xhr.open('PUT', url, true);
xhr.setRequestHeader('X-Custom-Header', 'value');
xhr.send();
</code></pre>
<p>上面代码中，HTTP请求的方法是PUT，并且发送一个自定义头信息X-Custom-Header。</p>
<p>浏览器发现，这是一个非简单请求，就自动发出一个&quot;预检&quot;请求，要求服务器确认可以这样请求。下面是这个&quot;预检&quot;请求的HTTP头信息。</p>
<pre class="line-numbers"><code>OPTIONS /cors HTTP/1.1
Origin: http://api.bob.com
Access-Control-Request-Method: PUT
Access-Control-Request-Headers: X-Custom-Header
Host: api.alice.com
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
</code></pre>
<p>&quot;预检&quot;请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</p>
<p>除了Origin字段，&quot;预检&quot;请求的头信息包括两个特殊字段。</p>
<p>（1）Access-Control-Request-Method</p>
<p>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</p>
<p>（2）Access-Control-Request-Headers</p>
<p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p>
<h3><a id="4-2%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9B%9E%E5%BA%94" class="anchor" aria-hidden="true" href="#4-2%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9B%9E%E5%BA%94"><span class="octicon octicon-link"></span></a>4.2 预检请求的回应</h3>
<p>服务器收到&quot;预检&quot;请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p>
<pre class="line-numbers"><code>HTTP/1.1 200 OK
Date: Mon, 01 Dec 2008 01:15:39 GMT
Server: Apache/2.0.61 (Unix)
Access-Control-Allow-Origin: http://api.bob.com
Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Headers: X-Custom-Header
Content-Type: text/html; charset=utf-8
Content-Encoding: gzip
Content-Length: 0
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
Content-Type: text/plain
</code></pre>
<p>上面的HTTP回应中，关键的是Access-Control-Allow-Origin字段，表示<a href="http://api.bob.com%E5%8F%AF%E4%BB%A5%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E3%80%82%E8%AF%A5%E5%AD%97%E6%AE%B5%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%AE%BE%E4%B8%BA%E6%98%9F%E5%8F%B7%EF%BC%8C%E8%A1%A8%E7%A4%BA%E5%90%8C%E6%84%8F%E4%BB%BB%E6%84%8F%E8%B7%A8%E6%BA%90%E8%AF%B7%E6%B1%82%E3%80%82">http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</a></p>
<p>Access-Control-Allow-Origin: *
如果服务器否定了&quot;预检&quot;请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p>
<p>XMLHttpRequest cannot load <a href="http://api.alice.com">http://api.alice.com</a>.
Origin <a href="http://api.bob.com">http://api.bob.com</a> is not allowed by Access-Control-Allow-Origin.
服务器回应的其他CORS相关字段如下。</p>
<pre class="line-numbers"><code>Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Headers: X-Custom-Header
Access-Control-Allow-Credentials: true
Access-Control-Max-Age: 1728000
</code></pre>
<p>（1）Access-Control-Allow-Methods</p>
<p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&quot;预检&quot;请求。</p>
<p>（2）Access-Control-Allow-Headers</p>
<p>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在&quot;预检&quot;中请求的字段。</p>
<p>（3）Access-Control-Allow-Credentials</p>
<p>该字段与简单请求时的含义相同。</p>
<p>（4）Access-Control-Max-Age</p>
<p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p>
<h3><a id="4-3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%AD%A3%E5%B8%B8%E8%AF%B7%E6%B1%82%E5%92%8C%E5%9B%9E%E5%BA%94" class="anchor" aria-hidden="true" href="#4-3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%AD%A3%E5%B8%B8%E8%AF%B7%E6%B1%82%E5%92%8C%E5%9B%9E%E5%BA%94"><span class="octicon octicon-link"></span></a>4.3 浏览器的正常请求和回应</h3>
<p>一旦服务器通过了&quot;预检&quot;请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p>
<p>下面是&quot;预检&quot;请求之后，浏览器的正常CORS请求。</p>
<pre class="line-numbers"><code>PUT /cors HTTP/1.1
Origin: http://api.bob.com
Host: api.alice.com
X-Custom-Header: value
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
</code></pre>
<p>上面头信息的Origin字段是浏览器自动添加的。</p>
<p>下面是服务器正常的回应。</p>
<pre class="line-numbers"><code>Access-Control-Allow-Origin: http://api.bob.com
Content-Type: text/html; charset=utf-8
</code></pre>
<p>上面头信息中，Access-Control-Allow-Origin字段是每次回应都必定包含的。</p>
<h2><a id="%E4%BA%94%E3%80%81cookie%E7%9A%84secure%E3%80%81httponly%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE" class="anchor" aria-hidden="true" href="#%E4%BA%94%E3%80%81cookie%E7%9A%84secure%E3%80%81httponly%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE"><span class="octicon octicon-link"></span></a>五、cookie的secure、httponly属性设置</h2>
<p>1 secure属性
当设置为true时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该信息，所以不会被窃取到Cookie 的具体内容。</p>
<p>2 HttpOnly属性
如果在Cookie中设置了&quot;HttpOnly&quot;属性，那么通过程序(JS脚本、Applet等)将无法读取到Cookie信息，这样能有效的防止XSS攻击。</p>
<p>对于以上两个属性，
首先，secure属性是防止信息在传递的过程中被监听捕获后信息泄漏，HttpOnly属性的目的是防止程序获取cookie后进行攻击。</p>
<h2><a id="%E5%8F%82%E8%80%83" class="anchor" aria-hidden="true" href="#%E5%8F%82%E8%80%83"><span class="octicon octicon-link"></span></a>参考</h2>
<ul>
<li><a href="http://t.zoukankan.com/geniusxjq-p-4280022.html">http://t.zoukankan.com/geniusxjq-p-4280022.html</a></li>
<li><a href="https://www.csdn.net/tags/NtzaAg4sNjk1ODEtYmxvZwO0O0OO0O0O.html">https://www.csdn.net/tags/NtzaAg4sNjk1ODEtYmxvZwO0O0OO0O0O.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成本地ssl签名工具：mkcert]]></title>
    <link href="jythons.github.io/16569086965834.html"/>
    <updated>2022-07-04T12:24:56+08:00</updated>
    <id>jythons.github.io/16569086965834.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80" class="anchor" aria-hidden="true" href="#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80"><span class="octicon octicon-link"></span></a>下载地址</h2>
<pre class="line-numbers"><code>https://github.com/FiloSottile/mkcert/releases
</code></pre>
<h2><a id="%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true" href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95"><span class="octicon octicon-link"></span></a>使用方法</h2>
<pre class="line-numbers"><code class="language-shell">// 安装证书
mkcert -install

// 生成证书
mkcert 域名 [IP]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IDEA创建项目连接超时]]></title>
    <link href="jythons.github.io/16561693995402.html"/>
    <updated>2022-06-25T23:03:19+08:00</updated>
    <id>jythons.github.io/16561693995402.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" class="anchor" aria-hidden="true" href="#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95"><span class="octicon octicon-link"></span></a>解决办法</h2>
<p>将<a href="https://start.spring.io">https://start.spring.io</a> 替换成 <a href="https://start.aliyun.com">https://start.aliyun.com</a> 即可</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anaconda基本使用]]></title>
    <link href="jythons.github.io/16534643173913.html"/>
    <updated>2022-05-25T15:38:37+08:00</updated>
    <id>jythons.github.io/16534643173913.html</id>
    <content type="html"><![CDATA[
<p>1.切换Python环境命令</p>
<pre class="line-numbers"><code>conda activate python2
</code></pre>
<p>2.获取环境列表</p>
<pre class="line-numbers"><code>conda env list
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel 获取目录方法]]></title>
    <link href="jythons.github.io/16518882443295.html"/>
    <updated>2022-05-07T09:50:44+08:00</updated>
    <id>jythons.github.io/16518882443295.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code>base_path()    //站点根目录
app_path()     //app目录
public_path()  //public目录
storage_path()  //storage 目录
resource_path()  //resources 目录
config_path()    //config 目录
database_path()  //database 目录
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 7 防火墙开启/关闭]]></title>
    <link href="jythons.github.io/16502914652460.html"/>
    <updated>2022-04-18T22:17:45+08:00</updated>
    <id>jythons.github.io/16502914652460.html</id>
    <content type="html"><![CDATA[
<p>CentOS 7.0默认使用的是firewall作为防火墙
使用systemctl来管理服务和程序，包括了service和chkconfig</p>
<p>1、查看默认防火墙状态（关闭后显示not running，开启后显示running）</p>
<p>firewall-cmd --state</p>
<p>2、检查防火墙的状态</p>
<p>systemctl list-unit-files|grep firewalld.service</p>
<p>或者：</p>
<p>systemctl status firewalld.service</p>
<p>3、开启防火墙</p>
<p>systemctl start firewalld.service --启动firewall</p>
<p>systemctl enable firewalld.service --开机时启动firewall</p>
<p>4、关闭防火墙：</p>
<p>systemctl stop firewalld.service --停止firewall</p>
<p>systemctl disable firewalld.service --禁止firewall开机启动</p>
<p>5、重启防火墙</p>
<p>systemctl restart firewalld.service</p>
<p>6、查看防火墙是否开机自启</p>
<p>systemctl is-enabled firewalld.service;echo $? enabled --自启</p>
<p>或者：
systemctl is-enabled firewalld.service;echo $? disabled --不自启</p>
<p>7、查看已启动的服务列表</p>
<p>systemctl list-unit-files|grep enabled</p>
<p>8、开启端口</p>
<p>firewall-cmd --zone=public --add-port=80/tcp --permanent</p>
<p>命令含义：
–zone #作用域
–add-port=80/tcp #添加端口，格式为：端口/通讯协议
–permanent #永久生效，没有此参数重启后失效</p>
<p>9、查看已经开放的端口</p>
<p>firewall-cmd --list-port</p>
<p>10、屏蔽FirewallD服务</p>
<p>systemctl mask firewalld</p>
<p>还可以通过创建一个firewall.service到/dev/null的符号连接来屏蔽防火墙服务。</p>
<p>11、反屏蔽FirewallD服务</p>
<p>systemctl unmask firewalld</p>
<p>这是反屏蔽FirewallD服务，它会移除屏蔽FirewallD服务时创建的符号链接，故能重新启用服务。</p>
<p>12、检查是否已安装防火墙</p>
<p>yum install firewalld firewall-config</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小程序登录授权]]></title>
    <link href="jythons.github.io/16472675086135.html"/>
    <updated>2022-03-14T22:18:28+08:00</updated>
    <id>jythons.github.io/16472675086135.html</id>
    <content type="html"><![CDATA[
<p>小程序登录授权时，需要先调用wx.login()方法，在调用获取用户信息方法，否则后端验签不通过</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringBoot启动报错：Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required]]></title>
    <link href="jythons.github.io/16472219555526.html"/>
    <updated>2022-03-14T09:39:15+08:00</updated>
    <id>jythons.github.io/16472219555526.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%8E%9F%E5%9B%A0" class="anchor" aria-hidden="true" href="#%E5%8E%9F%E5%9B%A0"><span class="octicon octicon-link"></span></a>原因</h2>
<p>Mybatis高版本取消了自动注入SqlSessionFactory 和 SqlSessionTemplate。</p>
<h2><a id="%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" class="anchor" aria-hidden="true" href="#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95"><span class="octicon octicon-link"></span></a>解决办法</h2>
<p>添加一下依赖即可解决：</p>
<pre class="line-numbers"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.1.9&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 18.04 Mysql每次访问需要加sudo的问题]]></title>
    <link href="jythons.github.io/16468191777738.html"/>
    <updated>2022-03-09T17:46:17+08:00</updated>
    <id>jythons.github.io/16468191777738.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E4%BF%AE%E6%94%B9-root%E7%94%A8%E6%88%B7" class="anchor" aria-hidden="true" href="#1%E4%BF%AE%E6%94%B9-root%E7%94%A8%E6%88%B7"><span class="octicon octicon-link"></span></a>1.修改root用户</h2>
<pre class="line-numbers"><code class="language-sql">mysql&gt; use mysql;
mysql&gt; select User,Host,plugin from user;
</code></pre>
<p>查看root用户权限，是否是<code>mysql_native_password</code>，如果不是，则将<code>auth_sock</code>改为<code>mysql_native_password</code></p>
<pre class="line-numbers"><code class="language-sql">mysql&gt; update user set plugin='mysql_native_password' where user='root'; 
</code></pre>
<p>或者习性下面语句，这样就不需要执行第二步的内容了</p>
<pre class="line-numbers"><code class="language-sql">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
</code></pre>
<h2><a id="2%E4%BF%AE%E6%94%B9%E6%88%96%E8%80%85%E8%AE%BE%E7%BD%AE-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81" class="anchor" aria-hidden="true" href="#2%E4%BF%AE%E6%94%B9%E6%88%96%E8%80%85%E8%AE%BE%E7%BD%AE-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81"><span class="octicon octicon-link"></span></a>2.修改或者设置root用户密码</h2>
<p>首先用debian-sys-maint登录，密码在/etc/mysql/debian.cnf文件</p>
<pre class="line-numbers"><code class="language-sql">mysql&gt; mysql -u debian-sys-maint -p
</code></pre>
<p>然后修改root密码（密码可与之前的一样）：</p>
<pre class="line-numbers"><code class="language-sql">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<p>然后，quit;退出。</p>
<p>经过这两步之后便可以使用 mysql -u root -p登录 Mysql， 不需要带上sudo.</p>
<h2><a id="%E5%8F%82%E8%80%83" class="anchor" aria-hidden="true" href="#%E5%8F%82%E8%80%83"><span class="octicon octicon-link"></span></a>参考</h2>
<p><a href="https://blog.csdn.net/zlf1227/article/details/91808443?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_antiscan_v2&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">Ubuntu 18.04 Mysql每次访问需要加sudo的问题</a></p>

]]></content>
  </entry>
  
</feed>
