<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jythons小站]]></title>
  <link href="jythons.github.io/atom.xml" rel="self"/>
  <link href="jythons.github.io/"/>
  <updated>2022-01-07T14:31:00+08:00</updated>
  <id>jythons.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[MySQL索引原理以及查询优化]]></title>
    <link href="jythons.github.io/16415257910695.html"/>
    <updated>2022-01-07T11:23:11+08:00</updated>
    <id>jythons.github.io/16415257910695.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E3%80%81%E4%BB%8B%E7%BB%8D" class="anchor" aria-hidden="true" href="#1%E3%80%81%E4%BB%8B%E7%BB%8D"><span class="octicon octicon-link"></span></a>1、介绍</h2>
<h3><a id="1-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E7%B4%A2%E5%BC%95%EF%BC%9F" class="anchor" aria-hidden="true" href="#1-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E7%B4%A2%E5%BC%95%EF%BC%9F"><span class="octicon octicon-link"></span></a>1.1、什么是索引？</h3>
<p>一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，因此对查询语句的优化显然是重中之重。说起加速查询，就不得不提到索引了。</p>
<h3><a id="1-2%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E7%B4%A2%E5%BC%95%E5%91%A2%EF%BC%9F" class="anchor" aria-hidden="true" href="#1-2%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E7%B4%A2%E5%BC%95%E5%91%A2%EF%BC%9F"><span class="octicon octicon-link"></span></a>1.2、为什么要有索引呢？</h3>
<p>索引在MySQL中也叫做“键”，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能
非常关键，尤其是当表中的数据量越来越大时，索引对于性能的影响愈发重要。
索引优化应该是对查询性能优化最有效的手段了。索引能够轻易将查询性能提高好几个数量级。
索引相当于字典的音序表，如果要查某个字，如果不使用音序表，则需要从几百页中逐页去查。</p>
<span id="more"></span><!-- more -->
<h2><a id="2%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E7%90%86" class="anchor" aria-hidden="true" href="#2%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E7%90%86"><span class="octicon octicon-link"></span></a>2、索引的原理</h2>
<h3><a id="2-1%E3%80%81%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86" class="anchor" aria-hidden="true" href="#2-1%E3%80%81%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86"><span class="octicon octicon-link"></span></a>2.1、 索引原理</h3>
<p>索引的目的在于提高查询效率，与我们查阅图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小节，然后找到页数。相似的例子还有：查字典，查火车车次，飞机航班等</p>
<p>本质都是：通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</p>
<p>数据库也是一样，但显然要复杂的多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段......这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的。而数据库实现比较复杂，一方面数据是保存在磁盘上的，另外一方面为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p>
<h3><a id="2-2%E3%80%81%E7%A3%81%E7%9B%98io%E4%B8%8E%E9%A2%84%E8%AF%BB" class="anchor" aria-hidden="true" href="#2-2%E3%80%81%E7%A3%81%E7%9B%98io%E4%B8%8E%E9%A2%84%E8%AF%BB"><span class="octicon octicon-link"></span></a>2.2、磁盘IO与预读</h3>
<p>考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。</p>
<h3><a id="2-3%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" class="anchor" aria-hidden="true" href="#2-3%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"><span class="octicon octicon-link"></span></a>2.3、索引的数据结构</h3>
<p>任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。</p>
<p><img src="media/16415257910695/B+tree.png" alt="B+tree" /></p>
<p>如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p>
<h4><a id="2-3-1%E3%80%81b%E6%A0%91%E7%9A%84%E6%9F%A5%E6%89%BE%E8%BF%87%E7%A8%8B" class="anchor" aria-hidden="true" href="#2-3-1%E3%80%81b%E6%A0%91%E7%9A%84%E6%9F%A5%E6%89%BE%E8%BF%87%E7%A8%8B"><span class="octicon octicon-link"></span></a>2.3.1、b+树的查找过程</h4>
<p>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p>
<h4><a id="2-3-2%E3%80%81b%E6%A0%91%E6%80%A7%E8%B4%A8" class="anchor" aria-hidden="true" href="#2-3-2%E3%80%81b%E6%A0%91%E6%80%A7%E8%B4%A8"><span class="octicon octicon-link"></span></a>2.3.2、b+树性质</h4>
<ul>
<li>索引字段要尽量的小：通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</li>
<li>索引的最左匹配特性（即从左往右匹配）：当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</li>
</ul>
<h2><a id="3%E3%80%81mysql%E7%B4%A2%E5%BC%95%E7%AE%A1%E7%90%86" class="anchor" aria-hidden="true" href="#3%E3%80%81mysql%E7%B4%A2%E5%BC%95%E7%AE%A1%E7%90%86"><span class="octicon octicon-link"></span></a>3、Mysql索引管理</h2>
<h3><a id="3-1%E3%80%81%E5%8A%9F%E8%83%BD" class="anchor" aria-hidden="true" href="#3-1%E3%80%81%E5%8A%9F%E8%83%BD"><span class="octicon octicon-link"></span></a>3.1、功能</h3>
<ol>
<li>索引的功能就是加速查找</li>
<li>mysql中的primary key，unique，联合唯一也都是索引，这些索引除了加速查找以外，还有约束的功能
二、MySQL的索引分类</li>
</ol>
<h3><a id="3-2%E3%80%81%E7%B4%A2%E5%BC%95%E5%88%86%E7%B1%BB" class="anchor" aria-hidden="true" href="#3-2%E3%80%81%E7%B4%A2%E5%BC%95%E5%88%86%E7%B1%BB"><span class="octicon octicon-link"></span></a>3.2、索引分类</h3>
<ul>
<li>普通索引index :加速查找</li>
<li>唯一索引
<ul>
<li>主键索引：primary key ：加速查找+约束（不为空且唯一）</li>
<li>唯一索引：unique：加速查找+约束 （唯一）</li>
</ul>
</li>
<li>联合索引
<ul>
<li>-primary key(id,name):联合主键索引</li>
<li>-unique(id,name):联合唯一索引</li>
<li>-index(id,name):联合普通索引</li>
</ul>
</li>
<li>全文索引fulltext :用于搜索很长一篇文章的时候，效果最好。</li>
<li>空间索引spatial :了解就好，几乎不用</li>
</ul>
<blockquote>
<p>举个例子来说，比如你在为某商场做一个会员卡的系统。
这个系统有一个会员表，有下列字段：</p>
<ul>
<li>会员编号 INT</li>
<li>会员姓名 VARCHAR(10)</li>
<li>会员身份证号码 VARCHAR(18)</li>
<li>会员电话 VARCHAR(10)</li>
<li>会员住址 VARCHAR(50)</li>
<li>会员备注信息 TEXT<br />
那么这个 会员编号，作为主键，使用 PRIMARY，<br />
会员姓名 如果要建索引的话，那么就是普通的 INDEX，<br />
会员身份证号码 如果要建索引的话，那么可以选择 UNIQUE （唯一的，不允许重复），<br />
除此之外还有全文索引，即FULLTEXT，<br />
会员备注信息，如果需要建索引的话，可以选择全文搜索。<br />
用于搜索很长一篇文章的时候，效果最好。<br />
用在比较短的文本，如果就一两行字的，普通的 INDEX 也可以。<br />
但其实对于全文搜索，我们并不会使用MySQL自带的该索引，而是会选择第三方软件如Sphinx，专门来做全文搜索。<br />
其他的如空间索引SPATIAL，了解即可，几乎不用。</li>
</ul>
</blockquote>
<h3><a id="3-3%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E4%B8%A4%E5%A4%A7%E7%B1%BB%E5%9E%8B-hash%E4%B8%8Ebtree" class="anchor" aria-hidden="true" href="#3-3%E3%80%81%E7%B4%A2%E5%BC%95%E7%9A%84%E4%B8%A4%E5%A4%A7%E7%B1%BB%E5%9E%8B-hash%E4%B8%8Ebtree"><span class="octicon octicon-link"></span></a>3.3、 索引的两大类型hash与btree</h3>
<h4><a id="3-3-1%E3%80%81%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%88%9B%E5%BB%BA%E4%B8%8A%E8%BF%B0%E7%B4%A2%E5%BC%95%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%B8%BA%E5%85%B6%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%88%86%E4%B8%A4%E7%B1%BB" class="anchor" aria-hidden="true" href="#3-3-1%E3%80%81%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%88%9B%E5%BB%BA%E4%B8%8A%E8%BF%B0%E7%B4%A2%E5%BC%95%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%B8%BA%E5%85%B6%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%88%86%E4%B8%A4%E7%B1%BB"><span class="octicon octicon-link"></span></a>3.3.1、我们可以在创建上述索引的时候，为其指定索引类型，分两类</h4>
<ul>
<li>hash类型的索引：查询单条快，范围查询慢</li>
<li>btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</li>
</ul>
<h4><a id="3-3-2%E3%80%81%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%94%AF%E6%8C%81%E7%9A%84%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%E4%B9%9F%E4%B8%8D%E4%B8%80%E6%A0%B7" class="anchor" aria-hidden="true" href="#3-3-2%E3%80%81%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%94%AF%E6%8C%81%E7%9A%84%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%E4%B9%9F%E4%B8%8D%E4%B8%80%E6%A0%B7"><span class="octicon octicon-link"></span></a>3.3.2、不同的存储引擎支持的索引类型也不一样**</h4>
<ul>
<li>InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</li>
<li>MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</li>
<li>Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</li>
<li>NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</li>
<li>Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</li>
</ul>
<h3><a id="3-4%E3%80%81%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95%E7%9A%84%E8%AF%AD%E6%B3%95" class="anchor" aria-hidden="true" href="#3-4%E3%80%81%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95%E7%9A%84%E8%AF%AD%E6%B3%95"><span class="octicon octicon-link"></span></a>3.4、创建/删除索引的语法</h3>
<h4><a id="3-4-1%E3%80%81%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%88%9B%E5%BB%BA%E8%A1%A8%E6%97%B6" class="anchor" aria-hidden="true" href="#3-4-1%E3%80%81%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%88%9B%E5%BB%BA%E8%A1%A8%E6%97%B6"><span class="octicon octicon-link"></span></a>3.4.1、方法一：创建表时</h4>
<pre class="line-numbers"><code class="language-sql">CREATE TABLE 表名 (
    字段名1  数据类型 [完整性约束条件…],
    字段名2  数据类型 [完整性约束条件…],
    [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY
    [索引名]  (字段名[(长度)]  [ASC |DESC]) 
);
</code></pre>
<h4><a id="3-4-2%E3%80%81%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9Acreate%E5%9C%A8%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E8%A1%A8%E4%B8%8A%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#3-4-2%E3%80%81%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9Acreate%E5%9C%A8%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E8%A1%A8%E4%B8%8A%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>3.4.2、方法二：CREATE在已存在的表上创建索引</h4>
<pre class="line-numbers"><code class="language-sql">CREATE  [UNIQUE | FULLTEXT | SPATIAL ]  INDEX  索引名 
ON 表名 (字段名[(长度)]  [ASC |DESC]) ;
</code></pre>
<h4><a id="3-4-3%E3%80%81%E6%96%B9%E6%B3%95%E4%B8%89%EF%BC%9Aalter-table%E5%9C%A8%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E8%A1%A8%E4%B8%8A%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#3-4-3%E3%80%81%E6%96%B9%E6%B3%95%E4%B8%89%EF%BC%9Aalter-table%E5%9C%A8%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E8%A1%A8%E4%B8%8A%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>3.4.3、方法三：ALTER TABLE在已存在的表上创建索引</h4>
<pre class="line-numbers"><code class="language-sql">ALTER TABLE 表名 ADD  [UNIQUE | FULLTEXT | SPATIAL ] INDEX
索引名 (字段名[(长度)]  [ASC |DESC]) ;
</code></pre>
<h4><a id="3-4-4%E3%80%81%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95%EF%BC%9A" class="anchor" aria-hidden="true" href="#3-4-4%E3%80%81%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95%EF%BC%9A"><span class="octicon octicon-link"></span></a>3.4.4、删除索引：</h4>
<pre class="line-numbers"><code class="language-sql">DROP INDEX 索引名 ON 表名字;
</code></pre>
<h3><a id="3-5%E3%80%81%E5%96%84%E7%94%A8%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3" class="anchor" aria-hidden="true" href="#3-5%E3%80%81%E5%96%84%E7%94%A8%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3"><span class="octicon octicon-link"></span></a>3.5、善用帮助文档</h3>
<ul>
<li>help create</li>
<li>help create index</li>
</ul>
<h4><a id="3-5-1%E3%80%81%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#3-5-1%E3%80%81%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>3.5.1、创建索引</h4>
<ul>
<li>在创建表时就创建（需要注意的几点）：</li>
</ul>
<pre class="line-numbers"><code class="language-sql">create table s1(
    id int ,#可以在这加primary key
    #id int index #不可以这样加索引，因为index只是索引，没有约束一说，
    #不能像主键，还有唯一约束一样，在定义字段的时候加索引
    name char(20),
    age int,
    email varchar(30)
    #primary key(id) #也可以在这加
    index(id) #可以这样加
);
</code></pre>
<ul>
<li>在创建表后在创建</li>
</ul>
<pre class="line-numbers"><code class="language-sql">create index name on s1(name); #添加普通索引
create unique age on s1(age);添加唯一索引
alter table s1 add primary key(id); #添加住建索引，也就是给id字段增加一个主键约束
create index name on s1(id,name); #添加普通联合索引
</code></pre>
<h4><a id="3-5-2%E3%80%81%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#3-5-2%E3%80%81%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>3.5.2、删除索引</h4>
<pre class="line-numbers"><code class="language-sql">drop index id on s1;
drop index name on s1; #删除普通索引
drop index age on s1; #删除唯一索引，就和普通索引一样，不用在index前加unique来删，直接就可以删了
alter table s1 drop primary key; #删除主键(因为它添加的时候是按照alter来增加的，那么我们也用alter来删)
</code></pre>
<h3><a id="3-6%E3%80%81%E6%B5%8B%E8%AF%95%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#3-6%E3%80%81%E6%B5%8B%E8%AF%95%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>3.6、测试索引</h3>
<h4><a id="3-6-1%E3%80%81%E5%87%86%E5%A4%87" class="anchor" aria-hidden="true" href="#3-6-1%E3%80%81%E5%87%86%E5%A4%87"><span class="octicon octicon-link"></span></a>3.6.1、准备</h4>
<ul>
<li>准备表</li>
</ul>
<pre class="line-numbers"><code class="language-sql">create table s1(
    id int,
    name varchar(20),
    gender char(6),
    email varchar(50)
);
</code></pre>
<ul>
<li>创建存储过程，实现批量插入记录</li>
</ul>
<blockquote>
<p>delimiter $$ #声明存储过程的结束符号为$$</p>
</blockquote>
<pre class="line-numbers"><code class="language-sql">delimiter $$
create procedure auto_insert1()
    BEGIN
        declare i int default 1;
        while(i&lt;3000000)do
            insert into s1  values(i,concat('egon',i),'male',concat('egon',i,'@oldboy')
        );
        set i=i+1;
    end while;
END$$ #$$结束
delimiter ; #重新声明分号为结束符号
</code></pre>
<ul>
<li>查看存储过程</li>
</ul>
<pre class="line-numbers"><code class="language-sql">show create procedure auto_insert1\G 
</code></pre>
<ul>
<li>调用存储过程</li>
</ul>
<pre class="line-numbers"><code class="language-sql">call auto_insert1();
</code></pre>
<h4><a id="3-6-2%E3%80%81%E5%9C%A8%E6%B2%A1%E6%9C%89%E7%B4%A2%E5%BC%95%E7%9A%84%E5%89%8D%E6%8F%90%E4%B8%8B%E6%B5%8B%E8%AF%95%E6%9F%A5%E8%AF%A2%E9%80%9F%E5%BA%A6" class="anchor" aria-hidden="true" href="#3-6-2%E3%80%81%E5%9C%A8%E6%B2%A1%E6%9C%89%E7%B4%A2%E5%BC%95%E7%9A%84%E5%89%8D%E6%8F%90%E4%B8%8B%E6%B5%8B%E8%AF%95%E6%9F%A5%E8%AF%A2%E9%80%9F%E5%BA%A6"><span class="octicon octicon-link"></span></a>3.6.2、在没有索引的前提下测试查询速度</h4>
<ul>
<li>无索引：从头到尾扫描一遍，所以查询速度很慢</li>
</ul>
<pre class="line-numbers"><code>mysql&gt; select * from s1 where id=333;
+------+---------+--------+----------------+
| id   | name    | gender | email          |
+------+---------+--------+----------------+
|  333 | egon333 | male   | 333@oldboy.com |
|  333 | egon333 | f      | alex333@oldboy |
|  333 | egon333 | f      | alex333@oldboy |
+------+---------+--------+----------------+
rows in set (0.32 sec)

mysql&gt; select * from s1 where email='egon333@oldboy';
....
... rows in set (0.36 sec)
</code></pre>
<ul>
<li>加上索引
<ul>
<li>一定是为搜索条件的字段创建索引，比如select * from t1 where age &gt; 5;就需要为age加上索引</li>
<li>在表中已经有大量数据的情况下，建索引会很慢，且占用硬盘空间，插入删除更新都很慢，只有查询快
比如create index idx on s1(id);会扫描表中所有的数据，然后以id为数据项，创建索引结构，存放于硬盘的表中。
建完以后，再查询就会很快了</li>
<li>需要注意的是：innodb表的索引会存放于s1.ibd文件中，而myisam表的索引则会有单独的索引文件table1.MYI
<img src="media/16415257910695/yousuoyin.png" alt="yousuoyin" /></li>
</ul>
</li>
</ul>
<h3><a id="3-7%E3%80%81%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#3-7%E3%80%81%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>3.7、正确使用索引</h3>
<h4><a id="3-7-1%E3%80%81%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#3-7-1%E3%80%81%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>3.7.1、覆盖索引</h4>
<pre class="line-numbers"><code class="language-sql">select * from s1 where id=123;
</code></pre>
<p>该sql命中了索引，但未覆盖索引。<br />
利用id=123到索引的数据结构中定位到该id在硬盘中的位置，或者说再数据表中的位置。<br />
但是我们select的字段为*，除了id以外还需要其他字段，这就意味着，我们通过索引结构取到id还不够，还需要利用该id再去找到该id所在行的其他字段值，这是需要时间的，很明显，如果我们只select id，
就减去了这份苦恼，如下</p>
<pre class="line-numbers"><code class="language-sql">select id from s1 where id=123;
</code></pre>
<p>这条就是覆盖索引了，命中索引，且从索引的数据结构直接就取到了id在硬盘的地址，速度很快</p>
<h4><a id="3-7-2%E3%80%81%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#3-7-2%E3%80%81%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>3.7.2、联合索引</h4>
<p><img src="media/16415257910695/lianhesuoyin.png" alt="lianhesuoyin" /></p>
<h4><a id="3-7-3%E3%80%81%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6" class="anchor" aria-hidden="true" href="#3-7-3%E3%80%81%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6"><span class="octicon octicon-link"></span></a>3.7.3、索引合并</h4>
<p><strong>索引合并：</strong> 把多个单列索引合并使用</p>
<p><strong>分析：</strong>
组合索引能做到的事情，我们都可以用索引合并去解决，比如</p>
<pre class="line-numbers"><code class="language-sql">create index ne on s1(name,email);#组合索引
</code></pre>
<p>我们完全可以单独为name和email创建索引</p>
<p>组合索引可以命中：</p>
<pre class="line-numbers"><code class="language-sql">select * from s1 where name='egon' ;
select * from s1 where name='egon' and email='adf';
</code></pre>
<p>索引合并可以命中：</p>
<pre class="line-numbers"><code class="language-sql">select * from s1 where name='egon' ;
select * from s1 where email='adf';
select * from s1 where name='egon' and email='adf';
</code></pre>
<p>乍一看好像索引合并更好了：可以命中更多的情况，但其实要分情况去看，如果是name='egon' and email='adf',
那么组合索引的效率要高于索引合并，如果是单条件查，那么还是用索引合并比较合理</p>
<h2><a id="4%E3%80%81%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE" class="anchor" aria-hidden="true" href="#4%E3%80%81%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE"><span class="octicon octicon-link"></span></a>4、索引使用建议</h2>
<h3><a id="4-1%E3%80%81%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#4-1%E3%80%81%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>4.1、联合索引</h3>
<p>若想利用索引达到预想的提高查询速度的效果，我们在添加索引时，必须遵循以下原则</p>
<ul>
<li>
<p>最左前缀匹配：必须按照从左到右的顺序匹配。mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p>
<pre class="line-numbers"><code>select * from s1 where name='egon'; #可以
select * from s1 where name='egon' and email='asdf'; #可以
select * from s1 where email='alex@oldboy.com'; #不可以
</code></pre>
</li>
<li>
<p>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器
会帮你优化成索引可以识别的形式</p>
</li>
<li>
<p>尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，
表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、
性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，
这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p>
</li>
<li>
<p>索引列不能参与计算，保持列“干净”，比如<code>from_unixtime(create_time) = ’2014-05-29’</code>就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p>
</li>
</ul>
<p><strong>最左前缀示范</strong></p>
<pre class="line-numbers"><code class="language-sql">mysql&gt; select * from s1 where id&gt;3 and name='egon' and email='alex333@oldboy.com' and gender='male';
Empty set (0.39 sec)

mysql&gt; create index idx on s1(id,name,email,gender); #未遵循最左前缀
Query OK, 0 rows affected (15.27 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; select * from s1 where id&gt;3 and name='egon' and email='alex333@oldboy.com' and gender='male';
Empty set (0.43 sec)

mysql&gt; drop index idx on s1;
Query OK, 0 rows affected (0.16 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; create index idx on s1(name,email,gender,id); #遵循最左前缀
Query OK, 0 rows affected (15.97 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; select * from s1 where id&gt;3 and name='egon' and email='alex333@oldboy.com' and gender='male';
Empty set (0.03 sec)
</code></pre>
<p>建联合索引，最左匹配
索引无法命中的情况需要注意：</p>
<pre class="line-numbers"><code class="language-sql">- like '%xx'
    select * from tb1 where email like '%cn';
    
    
- 使用函数
    select * from tb1 where reverse(email) = 'wupeiqi';
    
    
- or
    select * from tb1 where nid = 1 or name = 'seven@live.com';
    
    
    特别的：当or条件中有未建立索引的列才失效，以下会走索引
            select * from tb1 where nid = 1 or name = 'seven';
            select * from tb1 where nid = 1 or name = 'seven@live.com' and email = 'alex'
            
            
- 类型不一致
    如果列是字符串类型，传入条件是必须用引号引起来，不然...
    select * from tb1 where email = 999;
    
普通索引的不等于不会走索引
- !=
    select * from tb1 where email != 'alex'
    
    特别的：如果是主键，则还是会走索引
        select * from tb1 where nid != 123
- &gt;
    select * from tb1 where email &gt; 'alex'
    
    
    特别的：如果是主键或索引是整数类型，则还是会走索引
        select * from tb1 where nid &gt; 123
        select * from tb1 where num &gt; 123
        
        
#排序条件为索引，则select字段必须也是索引字段，否则无法命中
- order by
    select name from s1 order by email desc;
    当根据索引排序时候，select查询的字段如果不是索引，则不走索引
    select email from s1 order by email desc;
    特别的：如果对主键排序，则还是走索引：
        select * from tb1 order by nid desc;
 
- 组合索引最左前缀
    如果组合索引为：(name,email)
    name and email       -- 使用索引
    name                 -- 使用索引
    email                -- 不使用索引


- count(1)或count(列)代替count(*)在mysql中没有差别了

- create index xxxx  on tb(title(19)) #text类型，必须制定长度
</code></pre>
<h3><a id="4-2%E3%80%81%E5%85%B6%E4%BB%96" class="anchor" aria-hidden="true" href="#4-2%E3%80%81%E5%85%B6%E4%BB%96"><span class="octicon octicon-link"></span></a>4.2、其他</h3>
<ul>
<li>避免使用select *</li>
<li>count(1)或count(列) 代替 count(*)</li>
<li>创建表时尽量时 char 代替 varchar</li>
<li>表的字段顺序固定长度的字段优先</li>
<li>组合索引代替多个单列索引（经常使用多个条件查询时）</li>
<li>尽量使用短索引</li>
<li>使用连接（JOIN）来代替子查询(Sub-Queries)</li>
<li>连表时注意条件类型需一致</li>
<li>索引散列值（重复少）不适合建索引，例：性别不适合</li>
</ul>
<h2><a id="5%E3%80%81%E6%85%A2%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4" class="anchor" aria-hidden="true" href="#5%E3%80%81%E6%85%A2%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4"><span class="octicon octicon-link"></span></a>5、慢查询优化的基本步骤</h2>
<ol>
<li>先运行看看是否真的很慢，注意设置SQL_NO_CACHE</li>
<li>where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高</li>
<li>explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）</li>
<li>order by limit 形式的sql语句让排序的表优先查</li>
<li>了解业务方使用场景</li>
<li>加索引时参照建索引的几大原则</li>
<li>观察结果，不符合预期继续从0分析</li>
</ol>
<blockquote>
<p>文章来源：<a href="https://www.cnblogs.com/bypp/p/7755307.html">https://www.cnblogs.com/bypp/p/7755307.html</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClickHouse日常使用记录]]></title>
    <link href="jythons.github.io/16395498007523.html"/>
    <updated>2021-12-15T14:30:00+08:00</updated>
    <id>jythons.github.io/16395498007523.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A5" class="anchor" aria-hidden="true" href="#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A5"><span class="octicon octicon-link"></span></a>基本操作语句</h2>
<h3><a id="%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93" class="anchor" aria-hidden="true" href="#%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93"><span class="octicon octicon-link"></span></a>导入文件数据到数据库</h3>
<pre class="line-numbers"><code>clickhouse-client --port=9002 --query &quot;INSERT INTO tutorial.visits_v1 FORMAT TSV&quot; --max_insert_block_size=100000 &lt; ./visits_v1.tsv
</code></pre>
<blockquote>
<p>--port：指定端口<br />
--query：查询语句</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xdebug配置]]></title>
    <link href="jythons.github.io/16370681631438.html"/>
    <updated>2021-11-16T21:09:23+08:00</updated>
    <id>jythons.github.io/16370681631438.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E8%83%8C%E6%99%AF" class="anchor" aria-hidden="true" href="#1%E8%83%8C%E6%99%AF"><span class="octicon octicon-link"></span></a>1.背景</h2>
<p>在不使用xdebug调试代码时，遇到报错，有时需要在代码内主动打印，来定位问题。这样做效率慢，并且在调试完很容易漏删测试代码。为了提高排查问题效率，使用xdebug来调试代码问题，像idea调试java代码一样。下面介绍一下如何配置xdebug，实现远程调试php代码。<br />
我的环境是使用的docker来部署的代码。在宿主机远程调试docker内的代码。</p>
<span id="more"></span><!-- more -->
<h2><a id="2%E7%8E%AF%E5%A2%83" class="anchor" aria-hidden="true" href="#2%E7%8E%AF%E5%A2%83"><span class="octicon octicon-link"></span></a>2.环境</h2>
<p>1.代码在docker环境部署<br />
2.框架：laravel<br />
3.php版本：7.4<br />
4.xdebug版本：3.1+</p>
<h2><a id="3%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true" href="#3%E5%AE%89%E8%A3%85"><span class="octicon octicon-link"></span></a>3.安装</h2>
<p>需要在本地和docker内先安装php的xdebug拓展，安装方法如下：<br />
<strong>本地安装：</strong></p>
<pre class="line-numbers"><code>pecl install xdebug
</code></pre>
<blockquote>
<p>安装成功后，会自动配置带php.ini内，pecl在安装php环境的时候，会自动安装，如果没有添加到环境变量，可以去php的安装目录下：<code>/bin</code>文件夹下查找</p>
</blockquote>
<p><strong>docker安装：</strong></p>
<pre class="line-numbers"><code>1.安装xdebug拓展
pecl install xdebug

2.为php开启xdebug插件
docker-php-ext-enable xdebug
</code></pre>
<blockquote>
<p>docker下使用pecl安装完拓展，需要使用<code>docker-php-ext-enable</code>命令开启一下，该命令是docker容器下自带，可直接使用。</p>
</blockquote>
<h2><a id="4%E9%85%8D%E7%BD%AE-xdebug" class="anchor" aria-hidden="true" href="#4%E9%85%8D%E7%BD%AE-xdebug"><span class="octicon octicon-link"></span></a>4.配置xdebug</h2>
<p>docker环境下得php.ini文件是不存在得，他的配置都是根据拓展插件分开存放的，所以docker下配置xdebug的文件只需要在这个文件下配置即可：<br />
<code>/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</code>。</p>
<p><strong>配置信息：</strong></p>
<pre class="line-numbers"><code>xdebug.profiler_enable=on
xdebug.auto_trace=on
xdebug.collect_params=on
xdebug.collect_return=on
xdebug.show_exception_trace = On
xdebug.remote_autostart = Off
xdebug.client_enable = On
// 客户端监听端口（这里需要在phpstorm配置）
xdebug.client_port = 9001
// ide监听使用的标识
xdebug.idekey=PHPSTORM
xdebug.client_log=/tmp/xdebug_remote.log
// 宿主机的地址，为了防止变化
xdebug.client_host=docker.for.mac.localhost
xdebug.mode=debug
</code></pre>
<blockquote>
<p>这里需要注意，xdebug3.0以上版本，修改了配置key写法，3.0版本将2.0版本的remote_host等key换成了client_host，相对于2.0版本，把remote修改成client即可。
本地环境配置同上，客户端配置，根据实际情况修改即可。</p>
</blockquote>
<h2><a id="5-phpstorm%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true" href="#5-phpstorm%E9%85%8D%E7%BD%AE"><span class="octicon octicon-link"></span></a>5.phpstorm配置</h2>
<p>配置好了xdebug配置后，下面开始配置phpstorm。</p>
<h3><a id="5-1%E9%85%8D%E7%BD%AE-debug" class="anchor" aria-hidden="true" href="#5-1%E9%85%8D%E7%BD%AE-debug"><span class="octicon octicon-link"></span></a>5.1 配置debug</h3>
<p>打开phpstorm的设置菜单，选择php -&gt; debug(调试)：<br />
将xdebug的调试端口设置成9001（刚才在xdebug配置的客户端端口），配置好后点击<code>apply</code>。</p>
<p><img src="media/16370681631438/phpstorm1.png" alt="phpstorm1" /></p>
<h3><a id="5-2%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8" class="anchor" aria-hidden="true" href="#5-2%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8"><span class="octicon octicon-link"></span></a>5.2 配置服务器</h3>
<p>同样在上图所示的页面内，点击上面的服务器（server）。点击“+”号，添加一个服务器。<br />
输入名称、主机（远程项目域名）、端口，调试器选择：<code>xdebug</code> 。<br />
如果是远程服务器，需要将下面的复选框勾选，并且在项目文件上配置上本地项目和远程项目所在的绝对路径（到项目根目录即可）。点击：<code>apply</code>保存后，点击：<code>确定</code>。</p>
<p><img src="media/16370681631438/phpstorm2.jpg" alt="phpstorm2" /></p>
<h3><a id="5-3%E6%B7%BB%E5%8A%A0%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true" href="#5-3%E6%B7%BB%E5%8A%A0%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE"><span class="octicon octicon-link"></span></a>5.3 添加调试配置</h3>
<p>配置好上面的内容后，选择ide上面的调试配置，选择：<code>编辑配置</code>，添加远程调试配置。</p>
<p><img src="media/16370681631438/phpstorm3.png" alt="phpstorm3" /></p>
<p>点击：<code>+</code>，选择：<code>php远程调试</code>，输入名称，服务器选择刚才添加的服务器，IDE键选项填写：<code>PHPSTORM</code> (这里需要与xdebug配置的idekey配置保持一致)。配置好后，点击：<code>确定</code>，即可。下面就可以测试了。</p>
<p><img src="media/16370681631438/phpstorm4.png" alt="phpstorm4" /></p>
<h3><a id="5-4%E8%B0%83%E8%AF%95" class="anchor" aria-hidden="true" href="#5-4%E8%B0%83%E8%AF%95"><span class="octicon octicon-link"></span></a>5.4 调试</h3>
<p>点击ide最上面像电话一样的按钮，然后点击debug按钮，即可监听debug。
在调试接口的时候，在接口地址后面拼接：<code>XDEBUG_SESSION_START=PHPSTORM</code>参数，phpstorm的debug即可监听到请求，并且会在设置的断点处停止，下面就可以进行debug调试了。</p>
<h2><a id="%E5%90%90%E6%A7%BD" class="anchor" aria-hidden="true" href="#%E5%90%90%E6%A7%BD"><span class="octicon octicon-link"></span></a>吐槽</h2>
<p>网上搜索的一堆，都是在xdebug 2.0版本的配置，没有走通，后来是在启动项目时，检测php环境的xdebug出现了报错，根据报错发现的xdebug的参数修改了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime插件之ctags]]></title>
    <link href="jythons.github.io/16369427253226.html"/>
    <updated>2021-11-15T10:18:45+08:00</updated>
    <id>jythons.github.io/16369427253226.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E7%AE%80%E4%BB%8B" class="anchor" aria-hidden="true" href="#%E7%AE%80%E4%BB%8B"><span class="octicon octicon-link"></span></a>简介</h2>
<p>ctags插件用于实现代码跳转跟踪，用来调试代码。</p>
<h2><a id="%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true" href="#%E5%AE%89%E8%A3%85"><span class="octicon octicon-link"></span></a>安装</h2>
<p><strong>第一步：</strong><br />
mac下安装：<code>brew install ctags</code></p>
<p><strong>第二步：</strong><br />
打开菜单在Preferences菜单中打开Package settings-&gt;ctags-&gt;settings-user和settings-default把default中的配置全部复制到user中，然后改一下command配置项，为ctags的可执行文件路径,即ctags路径</p>
<p><strong>第三步：</strong><br />
配置快捷键：配置在sublime中使用Ctrl+左键单击函数跳转、Ctrl+右键单击跳回函数调用位置
复制以下代码到 Preferences-&gt;Package Settings-&gt;Ctags-&gt;Mouse Bindings-User</p>
<pre class="line-numbers"><code class="language-json">[
    {
        &quot;button&quot;: &quot;button1&quot;,
        &quot;count&quot;: 1,
        &quot;press_command&quot;: &quot;drag_select&quot;,
        &quot;modifiers&quot;: [&quot;ctrl&quot;],
        &quot;command&quot;: &quot;navigate_to_definition&quot;
    },
    {
        &quot;button&quot;: &quot;button2&quot;,
        &quot;count&quot;: 1,
        &quot;modifiers&quot;: [&quot;ctrl&quot;],
        &quot;command&quot;: &quot;jump_prev&quot;
    }
]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSTMAN自动获取laravel csrf]]></title>
    <link href="jythons.github.io/16353903707629.html"/>
    <updated>2021-10-28T11:06:10+08:00</updated>
    <id>jythons.github.io/16353903707629.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3" class="anchor" aria-hidden="true" href="#%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3"><span class="octicon octicon-link"></span></a>后端接口</h2>
<pre class="line-numbers"><code>public function store(Request $request){
    return Formater::ajaxReturn(0, 'success',['csrf_token'=&gt;csrf_token()]);
}
</code></pre>
<h2><a id="%E9%A2%84%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC" class="anchor" aria-hidden="true" href="#%E9%A2%84%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC"><span class="octicon octicon-link"></span></a>预处理脚本</h2>
<pre class="line-numbers"><code>var host = pm.environment.get(&quot;URL&quot;);

pm.sendRequest(host+&quot;/activity/zhenxing/store/41/z359Md3q&quot;, function (err, response) {
    if (response.code === 200) {
        console.log(response.json());
        var res = response.json();
        var csrf_token = res.data.csrf_token;

        pm.environment.set(&quot;csrf_token&quot;, csrf_token);
    }
});
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2021-10-19 企业微信授权：redirect_uri unauthorized]]></title>
    <link href="jythons.github.io/16346556525274.html"/>
    <updated>2021-10-19T23:00:52+08:00</updated>
    <id>jythons.github.io/16346556525274.html</id>
    <content type="html"><![CDATA[
<p>今天在调试企业微信授权的时候，在授权后获取用户信息的时候，报错:<code>Failed to get user openid:redirect_uri unauthorized</code></p>
<p>官方显示该错误是因为回调地址域名，没有添加到可信域名当中。但是已经检查多次，已经添加了，又折腾了半天，在官网问答页面看到了相似的问题，官方回复说是获取access_token的secret不是获取用户信息的应用的，但是检查数据库内的secret，发现是正确的。</p>
<p>后来猜测可能是缓存的数据没有变，改代码，临时关闭缓存，测试通过。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSTMAN自动生成签名]]></title>
    <link href="jythons.github.io/16342012831501.html"/>
    <updated>2021-10-14T16:48:03+08:00</updated>
    <id>jythons.github.io/16342012831501.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code>pm.environment.set(&quot;timestamps&quot;, Math.floor(new Date().getTime() / 1000));
var token = &quot;lBZXpB5uRw5M&quot;;
var timestamps = pm.environment.get(&quot;timestamps&quot;);

var data = request.data; //获取请求参数，转为json
console.log(&quot;data:&quot;, data)
var newdata = [];
newdata.push({
            name: 'timestamp',
            value: timestamps
        })
for (var a in data) {
    if (a !== 'sign' &amp;&amp; a !== 'timestamp') { //过滤掉sign参数，生成键值对象{name,value}
        newdata.push({
            name: a,
            value: data[a]
        })
    }
}
//排序
newdata.sort(function (a, b) {
    return a.name === b.name ? 0 : a.name &gt; b.name ? 1 : -1
});
//拼接字符串
for (var ar = [], i = 0; newdata.length &gt; i; i++) {
    var key = newdata[i].name;
    var val = newdata[i].value;
    if(key == 'name'){
        val = encodeURIComponent(newdata[i].value);
    }
    
    key &amp;&amp; val &amp;&amp; ar.push(key + &quot;=&quot; + val)
}

str = ar.join(&quot;&amp;&quot;); //拼接字符串
str = str+token
// str = encodeURIComponent(str);
console.log(str);

str = CryptoJS.MD5(str).toString().toLowerCase(); //md5加密后转大写
pm.environment.set(&quot;sign&quot;, str);  //把sign设置为环境变量
console.log(str);


</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MYSQL表设计规范]]></title>
    <link href="jythons.github.io/16279600005409.html"/>
    <updated>2021-08-03T11:06:40+08:00</updated>
    <id>jythons.github.io/16279600005409.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%B8%80%E3%80%81%E8%A1%A8%E8%AE%BE%E8%AE%A1" class="anchor" aria-hidden="true" href="#%E4%B8%80%E3%80%81%E8%A1%A8%E8%AE%BE%E8%AE%A1"><span class="octicon octicon-link"></span></a>一、 表设计</h2>
<ol>
<li>
<p>库名、表名、字段名必须使用小写字母，“_”分割。</p>
</li>
<li>
<p>库名、表名、字段名必须不超过12个字符。</p>
</li>
<li>
<p>库名、表名、字段名见名知意,建议使用名词而不是动词。</p>
</li>
<li>
<p>建议使用InnoDB存储引擎。</p>
</li>
<li>
<p>存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。</p>
</li>
<li>
<p>建议使用UNSIGNED存储非负数值。</p>
</li>
<li>
<p>建议使用INT UNSIGNED存储IPV4。</p>
</li>
<li>
<p>整形定义中不添加长度，比如使用INT，而不是INT(4)。</p>
</li>
<li>
<p>使用短数据类型，比如取值范围为0-80时，使用TINYINT UNSIGNED。</p>
</li>
<li>
<p>不建议使用ENUM类型，使用TINYINT来代替。</p>
</li>
<li>
<p>尽可能不使用TEXT、BLOB类型。</p>
</li>
<li>
<p>VARCHAR(N)，N表示的是字符数不是字节数，比如VARCHAR(255)，可以最大可存储255个汉字，需要根据实际的宽度来选择N。</p>
</li>
<li>
<p>VARCHAR(N)，N尽可能小，因为MySQL一个表中所有的VARCHAR字段最大长度是65535个字节，进行排序和创建临时表一类的内存操作时，会使用N的长度申</p>
</li>
<li>
<p>表字符集选择UTF8。</p>
</li>
<li>
<p>使用VARBINARY存储变长字符串。</p>
</li>
<li>
<p>存储年使用YEAR类型。</p>
</li>
<li>
<p>存储日期使用DATE类型。</p>
</li>
<li>
<p>存储时间(精确到秒)建议使用TIMESTAMP类型，因为TIMESTAMP使用4字节，DATETIME使用8个字节。</p>
</li>
<li>
<p>建议字段定义为NOT NULL。</p>
</li>
<li>
<p>将过大字段拆分到其他表中。</p>
</li>
<li>
<p>禁止在数据库中使用VARBINARY、BLOB存储图片、文件等。</p>
</li>
<li>
<p>表结构变更需要通知DBA审核。</p>
</li>
</ol>
<h2><a id="%E4%BA%8C%E3%80%81%E7%B4%A2%E5%BC%95" class="anchor" aria-hidden="true" href="#%E4%BA%8C%E3%80%81%E7%B4%A2%E5%BC%95"><span class="octicon octicon-link"></span></a>二、 索引</h2>
<ol>
<li>非唯一索引必须按照“idx_字段名称_字段名称[_字段名]”进行命名。 2. 唯一索引必须按照“uniq_字段名称_字段名称[_字段名]”进行命名。 3. 索引名称必须使用小写。</li>
<li>索引中的字段数建议不超过5个。</li>
<li>单张表的索引数量控制在5个以内。</li>
<li>唯一键由3个以下字段组成，并且字段都是整形时，使用唯一键作为主键。</li>
<li>没有唯一键或者唯一键不符合5中的条件时，使用自增(或者通过发号器获取)id作为主键。 8. 唯一键不和主键重复。</li>
<li>索引字段的顺序需要考虑字段值去重之后的个数，个数多的放在前面。</li>
<li>ORDER BY，GROUP BY，DISTINCT的字段需要添加在索引的后面。</li>
<li>使用EXPLAIN判断SQL语句是否合理使用索引，尽量避免extra列出现:Using File Sort，Using Temporary。</li>
<li>UPDATE、DELETE语句需要根据WHERE条件添加索引。</li>
<li>不建议使用%前缀模糊查询，例如LIKE “%weibo”。</li>
<li>对长度过长的VARCHAR字段建立索引时，添加crc32或者MD5 Hash字段，对Hash字段建立索引。</li>
<li>合理创建联合索引(避免冗余)，(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)。</li>
<li>合理利用覆盖索引。</li>
<li>SQL变更需要确认索引是否需要变更并通知DBA。</li>
</ol>
<h2><a id="%E4%B8%89%E3%80%81sql%E8%AF%AD%E5%8F%A5" class="anchor" aria-hidden="true" href="#%E4%B8%89%E3%80%81sql%E8%AF%AD%E5%8F%A5"><span class="octicon octicon-link"></span></a>三、 SQL语句</h2>
<ol>
<li>使用prepared statement，可以提供性能并且避免SQL注入。</li>
<li>SQL语句中IN包含的值不应过多。</li>
<li>UPDATE、DELETE语句不使用LIMIT。</li>
<li>WHERE条件中必须使用合适的类型，避免MySQL进行隐式类型转化。</li>
<li>SELECT语句只获取需要的字段。</li>
<li>SELECT、INSERT语句必须显式的指明字段名称，不使用SELECT *，不使用INSERT INTO table()。</li>
<li>使用SELECT column_name1, column_name2 FROM table WHERE [condition]而不是SELECT column_name1 FROM table WHERE
[condition]和SELECT column_name2 FROM table WHERE [condition]。</li>
<li>WHERE条件中的非等值条件(IN、BETWEEN、&lt;、&lt;=、&gt;、&gt;=)会导致后面的条件使用不了索引。</li>
<li>避免在SQL语句进行数学运算或者函数运算，容易将业务逻辑和DB耦合在一起。</li>
<li>INSERT语句使用batch提交(INSERT INTO table VALUES(),(),()......)，values的个数不应过多。</li>
<li>避免使用存储过程、触发器、函数等，容易将业务逻辑和DB耦合在一起，并且MySQL的存储过程、触发器、函数中存在一定的bug。</li>
<li>避免使用JOIN。</li>
<li>使用合理的SQL语句减少与数据库的交互次数。</li>
<li>不使用ORDER BY RAND()，使用其他方法替换。</li>
<li>建议使用合理的分页方式以提高分页的效率。</li>
<li>统计表中记录数时使用COUNT(*)，而不是COUNT(primary_key)和COUNT(1)。</li>
<li>禁止在从库上执行后台管理和统计类型功能的QUERY。</li>
</ol>
<h2><a id="%E5%9B%9B%E3%80%81%E6%95%A3%E8%A1%A8" class="anchor" aria-hidden="true" href="#%E5%9B%9B%E3%80%81%E6%95%A3%E8%A1%A8"><span class="octicon octicon-link"></span></a>四、 散表</h2>
<ol>
<li>每张表数据量建议控制在5000w以下。</li>
<li>可以结合使用hash、range、lookup table进行散表。</li>
<li>散表如果使用md5(或者类似的hash算法)进行散表，表名后缀使用16进制，比如user_ff。</li>
<li>推荐使用CRC32求余(或者类似的算术算法)进行散表，表名后缀使用数字，数字必须从0开始并等宽，比如散100张表，后缀从00-99。 5. 使用时间散表，表名后缀必须使用特定格式，比如按日散表user_20110209、按月散表user_201102。</li>
</ol>
<h2><a id="%E4%BA%94%E3%80%81%E5%85%B6%E4%BB%96" class="anchor" aria-hidden="true" href="#%E4%BA%94%E3%80%81%E5%85%B6%E4%BB%96"><span class="octicon octicon-link"></span></a>五、 其他</h2>
<ol>
<li>批量导入、导出数据需要DBA进行审查，并在执行过程中观察服务。</li>
<li>批量更新数据，如update,delete 操作，需要DBA进行审查，并在执行过程中观察服务。</li>
<li>产品出现非数据库平台运维导致的问题和故障时，如前端被抓站，请及时通知DBA，便于维护服务稳定。</li>
<li>业务部门程序出现bug等影响数据库服务的问题,请及时通知DBA，便于维护服务稳定。</li>
<li>业务部门推广活动，请提前通知DBA进行服务和访问评估。</li>
<li>如果出现业务部门人为误操作导致数据丢失，需要恢复数据，请在第一时间通知DBA，并提供准确时间，误操作语句等重要线索。</li>
</ol>
<hr />
<h2><a id="faq" class="anchor" aria-hidden="true" href="#faq"><span class="octicon octicon-link"></span></a>FAQ</h2>
<p><strong>1-1.库名、表名、字段名必须使用小写字母，“_”分割。</strong>
a)MySQL有配置参数lower_case_table_names，不可动态更改，linux系统默认为0，即库表名以实际情况存储，大小写敏感。如果是1，以小写存储，大小写不敏感。<br />
b) 如果大小写混合用，可能存在abc,Abc,ABC等多个表共存，容易导致混乱。<br />
c) 字段名显示区分大小写，但实际使用不区分，即不可以建立两个名字一样但大小写不一样的字段。<br />
d) 为了统一规范， 库名、表名、字段名使用小写字母。</p>
<p><strong>1-2.库名、表名、字段名必须不超过12个字符。 库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，必须不超过12字符。</strong></p>
<p><strong>1-3.库名、表名、字段名见名知意,建议使用名词而不是动词。</strong>
a) 用户评论可用表名usercomment或者comment。<br />
b) 库表是一种客观存在的事物，一种对象，所以建议使用名词。</p>
<p><strong>1-4.建议使用InnoDB存储引擎。</strong>
a) 5.5以后的默认引擘，支持事务，行级锁，更好的恢复性，高并发下性能更好，对多核，大内存，ssd等硬件支持更好。 b) 具体比较可见附件的官方白皮书。</p>
<p><strong>1-5.存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。</strong>
a) mysql中的数值类型(不包括整型)
IEEE754浮点数: float (单精度) ， double 或 real (双精度)
定点数: decimal 或 numeric 单精度浮点数的有效数字二进制是24位，按十进制来说，是8位;双精度浮点数的有效数字二进制是53位，按十进制来说，是16 位
一个实数的有效数字超过8位，用单精度浮点数来表示的话，就会产生误差!同样，如果一个实数的有效数字超过16位，用双精度浮点数来表示，也会产生误差<br />
b) IEEE754标准的计算机浮点数，在内部是用二进制表示的，但在将一个十进制数转换为二进制浮点数时，也会造成误差，原因是不是所有的数都能转换成有限长度
即一个二进制可以准确转换成十进制，但一个带小数的十进制不一定能够准确地用二进制来表示。<br />
实例:
drop table if exists t;
create table t(value float(10,2));
insert into t values(131072.67),(131072.68); select value from t;
+-----------+
| value     |
+-----------+
| 131072.67 |
| 131072.69 |
+-----------+</p>
<p><strong>1-6.建议使用UNSIGNED存储非负数值。 同样的字节数，存储的数值范围更大。如tinyint 有符号为 -128-127，无符号为0-255</strong><br />
<strong>1-7. 如何使用INT UNSIGNED存储ip?</strong>
使用INT UNSIGNED而不是char(15)来存储ipv4地址，通过MySQL函数inet_ntoa和inet_aton来进行转化。Ipv6地址目前没有转化函数，需要使用DECIMAL或者两个bigINT来
SELECT INET_ATON('209.207.224.40'); 3520061480
SELECT INET_NTOA(3520061480); 209.207.224.40</p>
<p><strong>1-8. INT[M]，M值代表什么含义?</strong>
注意数值类型括号后面的数字只是表示宽度而跟存储范围没有关系，比如INT(3)默认显示3位，空格补齐，超出时正常显示，python、java客户端等不具备这个功</p>
<p><strong>1-10.不建议使用ENUM、SET类型，使用TINYINT来代替。</strong>
a) ENUM，有三个问题:添加新的值要做DDL，默认值问题(将一个非法值插入ENUM(也就是说，允许的值列之外的字符串)，将插入空字符串以作为特殊错误值)，索引
实例:
drop table if exists t;
create table t(sex enum('0','1'));
insert into t values(1);
insert into t values('3');
select * from t;
+------+
| sex  |
+------+
|0     |
+------+
2 rows in set (0.00 sec)</p>
<p><strong>1-11.尽可能不使用TEXT、BLOB类型。</strong>
a) 索引排序问题，只能使用max_sort_length的长度或者手工指定ORDER BY SUBSTRING(column, length)的长度来排序<br />
b) Memory引擘不支持text,blog类型，会在磁盘上生成临时表<br />
c) 可能浪费更多的空间<br />
d) 可能无法使用adaptive hash index<br />
e) 导致使用where没有索引的语句变慢</p>
<p><strong>1-13. VARCHAR中会产生额外存储吗? VARCHAR(M)，如果M&lt;256时会使用一个字节来存储长度，如果M&gt;=256则使用两个字节来存储长度。</strong><br />
<strong>1-14.表字符集选择UTF8。</strong>
a) 使用utf8字符集，如果是汉字，占3个字节，但ASCII码字符还是1个字节。<br />
b) 统一，不会有转换产生乱码风险<br />
c) 其他地区的用户(美国、印度、台湾)无需安装简体中文支持，就能正常看您的文字，并且不会出现乱码<br />
d) ISO-8859-1编码(latin1)使用了单字节内的所有空间，在支持ISO-8859-1的系统中传输和存储其他任何编码的字节流都不会被抛弃。即把其他任何编码的字节流</p>
<p><strong>1-15.使用VARBINARY存储变长字符串。</strong>
二进制字节流，不存在编码问题</p>
<p><strong>1-18. 为什么建议使用TIMESTAMP来存储时间而不是DATETIME?</strong>
DATETIME和TIMESTAMP都是精确到秒，优先选择TIMESTAMP，因为TIMESTAMP只有4个字节，而DATETIME8个字节。同时TIMESTAMP具有自动赋值以及自动更新的特性。 如何使用TIMESTAMP的自动赋值属性?<br />
a) 将当前时间作为ts的默认值:ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP。<br />
b) 当行更新时，更新ts的值:ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP。<br />
c) 可以将1和2结合起来:ts TIMESTAMP DEFAULT  CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP。</p>
<p><strong>1-19.建议字段定义为NOT NULL。</strong>
a)如果null字段被索引，需要额外的1字节<br />
b)使索引，索引统计，值的比较变得更复杂<br />
c)可用0，''代替<br />
d)如果是索引字段，一定要定义为not null</p>
<p><strong>1-21.禁止在数据库中使用VARBINARY、BLOB存储图片、文件等。
采用分布式文件系统更高效</strong></p>
<p><strong>2. 为什么MySQL的性能依赖于索引?</strong>
MySQL的查询速度依赖良好的索引设计，因此索引对于高性能至关重要。合理的索引会加快查询速度(包括UPDATE和DELETE的速度，MySQL会将包含该行的page加
MySQL索引查找类似于新华字典的拼音和部首查找，当拼音和部首索引不存在时，只能通过一页一页的翻页来查找。当MySQL查询不能使用索引时，MySQL会进行全</p>
<p><strong>2-5. 为什么一张表中不能存在过多的索引?</strong>
InnoDB的secondary index使用b+tree来存储，因此在UPDATE、DELETE、INSERT的时候需要对b+tree进行调整，过多的索引会减慢更新的速度。</p>
<p><strong>2-11. EXPLAIN语句</strong>
EXPLAIN 语句(在MySQL客户端中执行)可以获得MySQL如何执行SELECT语句的信息。通过对SELECT语句执行EXPLAIN，可以知晓MySQL执 行该SELECT语句时是否使用了索引、全表扫描、临时表、排序等信息。尽量避免MySQL进行全表扫描、使用临时表、排序等。详见官方文档。</p>
<p><strong>2-13.不建议使用%前缀模糊查询，例如LIKE “%weibo”。
会导致全表扫描</strong><br />
<strong>2-14. 如何对长度大于50的VARCHAR字段建立索引? 下面的表增加一列url_crc32，然后对url_crc32建立索引，减少索引字段的长度，提高效率。</strong>
CREATE TABLE url(
......
url VARCHAR(255) NOT NULL DEFAULT 0, url_crc32 INT UNSIGNED NOT NULL DEFAULT 0,
......
index idx_url(url_crc32)
)</p>
<p><strong>2-16. 什么是覆盖索引?</strong>
InnoDB 存储引擎中，secondary index(非主键索引)中没有直接存储行地址，存储主键值。如果用户需要查询secondary index中所不包含的数据列时，需要先通过secondary index查找到主键值，然后再通过主键查询到其他数据列，因此需要查询两次。
覆盖索引的概念就是查询可以通过在一个索引中完成，覆盖索引效率会比较高，主键查询是天然的覆盖索引。
合理的创建索引以及合理的使用查询语句，当使用到覆盖索引时可以获得性能提升。
比如SELECT email,uid FROM user_email WHERE uid=xx，如果uid不是主键，适当时候可以将索引添加为index(uid,email)，以获得性能提升。</p>
<p><strong>3-3.UPDATE、DELETE语句不使用LIMIT。</strong>
a) 可能导致主从数据不一致<br />
b) 会记录到错误日志，导致日志占用大量空间<br />
<strong>3-4. 为什么需要避免MySQL进行隐式类型转化?</strong>
因为MySQL进行隐式类型转化之后，可能会将索引字段类型转化成=号右边值的类型，导致使用不到索引，原因和避免在索引字段中使用函数是类似的。</p>
<p>*<em>3-6. 为什么不建议使用SELECT <em>?</em></em>
增加很多不必要的消耗(cpu、io、内存、网络带宽);增加了使用覆盖索引的可能性;当表结构发生改变时，前段也需要更新。</p>
<p><strong>3-13. 如何减少与数据库的交互次数?</strong>
使用下面的语句来减少和db的交互次数:
INSERT ... ON DUPLICATE KEY UPDATE
REPLACE
INSERT IGNORE
INSERT INTO values(),()如何结合使用多个纬度进行散表散库?
例如微博message，先按照crc32(message_id)%16将message散到16个库中，然后针对每个库中的表，一天生成一张新表。</p>
<p><strong>3-14. 为什么不能使用ORDER BY rand()?</strong>
因为ORDER BY rand()会将数据从磁盘中读取，进行排序，会消耗大量的IO和CPU，可以在程序中获取一个rand值，然后通过在从数据库中获取对应的值。</p>
<p><strong>3-15. MySQL中如何进行分页?</strong></p>
<p>假如有类似下面分页语句:
SELECT * FROM table ORDER BY TIME DESC LIMIT 10000,10;
这种分页方式会导致大量的io，因为MySQL使用的是提前读取策略。
推荐分页方式:
SELECT * FROM table WHERE TIME&lt;last_TIME ORDER BY TIME DESC LIMIT 10.
SELECT * FROM table inner JOIN(SELECT id FROM table ORDER BY TIME LIMIT 10000,10) as t USING(id)</p>
<p><strong>3-17.为什么避免使用复杂的SQL?</strong>
拒绝使用复杂的SQL，将大的SQL拆分成多条简单SQL分步执行。原因:简单的SQL容易使用到MySQL的query cache;减少锁表时间特别是MyISAM;可以使用多核cpu。</p>
<p><strong>2. InnoDB存储引擎为什么避免使用COUNT(*)?</strong>
InnoDB表避免使用COUNT(*)操作，计数统计实时要求较强可以使用memcache或者redis，非实时统计可以使用单独统计表，定时更新。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx+php Docker-compose]]></title>
    <link href="jythons.github.io/16176799000056.html"/>
    <updated>2021-04-06T11:31:40+08:00</updated>
    <id>jythons.github.io/16176799000056.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code>version: &quot;2.1&quot;
services:
  nginx:
    image: nginx
    ports:
      - &quot;80:80&quot;
    volumes:
      - ~/kelala/nginx/www:/usr/share/nginx/html
      - ~/kelala/nginx/conf:/etc/nginx/conf.d
      - ~/kelala/nginx/logs:/var/log/nginx
    networks:
      - lnmp-network
  php:
    image: php:7.3-fpm
    volumes:
      - ~/kelala/nginx/www:/usr/share/nginx/html
    networks:
      - lnmp-network
networks:
  lnmp-network:
</code></pre>
<h2><a id="nginx%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true" href="#nginx%E9%85%8D%E7%BD%AE"><span class="octicon octicon-link"></span></a>nginx 配置</h2>
<pre class="line-numbers"><code>server {
    listen       80;
    server_name  hdcrmlocal.kerlala.com;
    root   /usr/share/nginx/html/hdcrm.kerlala.com/public/;
    index  index.html index.htm index.php;

    location / {
        
        try_files $uri $uri/ /index.php$is_args$args;
    }

    #error_page   500 502 503 504  /50x.html;
    #location = /50x.html {
    #    root   /usr/share/nginx/html;
    #}

    location ~ \.php$ {
        root           /usr/share/nginx/html/hdcrm.kerlala.com/public/;
        fastcgi_pass   172.19.0.3:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }
}

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker PHP环境搭建]]></title>
    <link href="jythons.github.io/16176785301116.html"/>
    <updated>2021-04-06T11:08:50+08:00</updated>
    <id>jythons.github.io/16176785301116.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E6%8B%89%E5%8F%96php%E9%95%9C%E5%83%8F" class="anchor" aria-hidden="true" href="#%E6%8B%89%E5%8F%96php%E9%95%9C%E5%83%8F"><span class="octicon octicon-link"></span></a>拉取PHP镜像</h2>
<pre class="line-numbers"><code>docker pull php:7.3-fpm
</code></pre>
<h2><a id="%E5%AE%89%E8%A3%85%E6%8B%93%E5%B1%95" class="anchor" aria-hidden="true" href="#%E5%AE%89%E8%A3%85%E6%8B%93%E5%B1%95"><span class="octicon octicon-link"></span></a>安装拓展</h2>
<p>docker容器内安装php拓展使用如下命令进行安装</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker-php-ext-source</td>
<td>在容器中创建一个/usr/src/php目录</td>
</tr>
<tr>
<td>docker-php-ext-enable</td>
<td>启用PHP扩展，省去我们手工编辑php.ini的过程</td>
</tr>
<tr>
<td>docker-php-ext-install</td>
<td>安装并启用PHP扩展</td>
</tr>
<tr>
<td>docker-php-ext-configure</td>
<td>经常与docker-php-ext-install搭配，在需要自定义扩展的配置时使用</td>
</tr>
</tbody>
</table>
<blockquote>
<p>例如：安装pdo拓展，使用如下命令即可</p>
</blockquote>
<pre class="line-numbers"><code>docker-php-ext-install pdo
</code></pre>
<blockquote>
<p>有些拓展使用 <code>docker-php-ext-install</code> 命令不能安装，可以使用pecl工具进行安装，当装好php的容器之后，容器内已经安装好了pecl工具，所以直接拿来使用即可。使用方法如下：</p>
</blockquote>
<pre class="line-numbers"><code>例如安装php的memcached拓展
1.首先更新源
apt-get update
2.安装所需依赖
apt-get install -y libmemcached-dev zlib1g-dev
3.安装memcached拓展
pecl install memcached
4.启用拓展
docker-php-ext-enable memcached

安装gd库拓展
1.首先更新源
apt-get update
2.安装所需依赖
apt-get install -y libwebp-dev libjpeg-dev libpng-dev libfreetype6-dev
3.安装拓展
docker-php-ext-install gd 

docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/  \
  &amp;&amp; docker-php-ext-install -j$(nproc) gd iconv mcrypt
</code></pre>
<blockquote>
<p>安装GD库还是报错：docker-php-ext-configure gd --with-webp=/usr/include/webp --with-jpeg=/usr/include --with-freetype=/usr/include/freetype2/</p>
</blockquote>
<blockquote>
<p>也可以编写一个DockerFile，加入如下命令：</p>
</blockquote>
<pre class="line-numbers"><code>FROM php:7.1-fpm
RUN apt-get update \
	# 手动安装依赖
	&amp;&amp; apt-get install -y libmemcached-dev zlib1g-dev \
	# 安装需要的扩展
   &amp;&amp; pecl install memcached-2.2.0 \
   # 启用扩展
   &amp;&amp; docker-php-ext-enable memcached
</code></pre>
<pre class="line-numbers"><code>安装zip扩展所需的依赖扩展
apt-get update &amp;&amp; apt-get install -y zlib1g-dev &amp;&amp; apt-get install -y libzip-dev

安装并启动zip扩展
docker-php-ext-install zip
</code></pre>
<pre class="line-numbers"><code>./configure --prefix=/usr/local/php/php8 \
     --with-config-file-path=/usr/local/php/php8/etc \
     --with-config-file-scan-dir=/usr/local/php/php8/etc/conf.d \
     --enable-bcmath \
     --with-bz2=/usr/local/opt/bzip2 \
     --with-curl=/usr/local/opt/curl \
     --enable-filter \
     --enable-fpm \
     --with-gd \
     --enable-gd-native-ttf \
     --with-freetype-dir \
     --with-jpeg-dir \
     --with-png-dir \
     --enable-intl \
     --enable-mbstring \
     --with-mcrypt \
     --enable-mysqlnd \
     --with-mysql-sock=/tmp/mysql.sock \
     --with-mysqli=mysqlnd \
     --with-pdo-mysql=mysqlnd \
     --with-pdo-sqlite \
     --with-zlib-dir=/usr/local/opt/zlib \
     --with-iconv=/usr/local/opt/libiconv \
     --with-icu-dir=/usr/local/opt/icu4c \
     --disable-phpdbg \
     --disable-phpdbg-webhelper \
     --enable-opcache \
     --with-openssl=/usr/bin/openssl \
     --enable-simplexml \
     --with-sqlite3 \
     --enable-xmlreader \
     --enable-xmlwriter \
     --enable-zip \
     --enable-sockets \
     --with-xmlrpc
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker网络]]></title>
    <link href="jythons.github.io/16121029199620.html"/>
    <updated>2021-01-31T22:21:59+08:00</updated>
    <id>jythons.github.io/16121029199620.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<h2><a id="none%E7%BD%91%E7%BB%9C" class="anchor" aria-hidden="true" href="#none%E7%BD%91%E7%BB%9C"><span class="octicon octicon-link"></span></a>none网络</h2>
<p>none网络不允许外部用户直连，如果需要访问，需要使用docker命令登录到容器内访问</p>
<h2><a id="host%E7%BD%91%E7%BB%9C" class="anchor" aria-hidden="true" href="#host%E7%BD%91%E7%BB%9C"><span class="octicon octicon-link"></span></a>host网络</h2>
<p>host网络是宿主机与容器共享IP地址，当访问者请求服务器的时候，同时也会给容器发送请求。
这种网路比较直接，但是在生产环境中不建议使用这种网络，因为存在大量的端口冲突，一个容器占用了端口，其他容器就不能使用这个端口了。</p>
<h2><a id="bridge%E7%BD%91%E7%BB%9C" class="anchor" aria-hidden="true" href="#bridge%E7%BD%91%E7%BB%9C"><span class="octicon octicon-link"></span></a>bridge网络</h2>
<p>使用网桥的方式与外网进行沟通，这样每个容器都可以使用相同的端口，通过与宿主机端口映射的方式实现。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerfile]]></title>
    <link href="jythons.github.io/16121005012878.html"/>
    <updated>2021-01-31T21:41:41+08:00</updated>
    <id>jythons.github.io/16121005012878.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<pre class="line-numbers"><code># 第一行一般写一些注释描述
FROM debian
MAINTAINER Jythons
RUN mkdir test1 # 容器启动后，执行的命令
RUN touch text2 # 同上
COPY test3 .    # 复制文件到当前目录
ADD test4.tar.gz . # 与copy相同，不同的地方是，拷贝压缩包是，会自动解压，后面如果添加的是URL，他会把这个地址对应的数据下载到目标文件夹下
EXPOSE 80 # 将宿主机端口与docker容器的端口进行绑定，也可以在服务启动时，使用-p指定
VALUME /data # 将宿主机的目录绑定到docker容器内，可以在容器启动时，使用-v指定
ENTRYPOINT [&quot;/bin/sh&quot;] # 这个命令永远都会被执行，并且会和CMD的命令一起执行
CMD [&quot;-c&quot;, &quot;ls -l&quot;] # 启动容器时，如果没有指定交互模式，则会执行，如果指定了，就不会执行

</code></pre>
<p>写好dockerfile文件后，使用下面的命令进行构建一个镜像</p>
<pre class="line-numbers"><code>docker build -t mysh .
</code></pre>
<blockquote>
<p>mysh 是镜像名称
. 表示在当前目录</p>
</blockquote>
<p>接下来就是启动这个镜像</p>
<pre class="line-numbers"><code>docker run mysh
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker 环境搭建]]></title>
    <link href="jythons.github.io/16120880849201.html"/>
    <updated>2021-01-31T18:14:44+08:00</updated>
    <id>jythons.github.io/16120880849201.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<p>从docker官网下载安装脚本</p>
<pre class="line-numbers"><code>curl -fsSL get.docker.com -o get-docker.sh
</code></pre>
<p>执行脚本</p>
<pre class="line-numbers"><code>使用阿里云镜像源执行脚本
get-docker.sh --mirror Aliyun
</code></pre>
<p>安装完成后重载一下daemon-reload</p>
<pre class="line-numbers"><code>systemctl daemon-reload
</code></pre>
<p>然后重启docker</p>
<pre class="line-numbers"><code>systemctl restart docker
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker 基本使用]]></title>
    <link href="jythons.github.io/16120805268878.html"/>
    <updated>2021-01-31T16:08:46+08:00</updated>
    <id>jythons.github.io/16120805268878.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<h2><a id="%E6%9F%A5%E7%9C%8Bdocker%E8%BF%9B%E7%A8%8B" class="anchor" aria-hidden="true" href="#%E6%9F%A5%E7%9C%8Bdocker%E8%BF%9B%E7%A8%8B"><span class="octicon octicon-link"></span></a>查看docker进程</h2>
<pre class="line-numbers"><code>docker ps 查看当前正在执行的进程
docker ps -a 查看所有进程，包括曾经执行过的进程
</code></pre>
<h2><a id="%E6%9F%A5%E7%9C%8Bdocker%E9%95%9C%E5%83%8F" class="anchor" aria-hidden="true" href="#%E6%9F%A5%E7%9C%8Bdocker%E9%95%9C%E5%83%8F"><span class="octicon octicon-link"></span></a>查看docker镜像</h2>
<pre class="line-numbers"><code>docker images
</code></pre>
<h2><a id="%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F" class="anchor" aria-hidden="true" href="#%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F"><span class="octicon octicon-link"></span></a>运行一个镜像</h2>
<pre class="line-numbers"><code>docker run image-name # image-name是镜像名称
</code></pre>
<pre class="line-numbers"><code>启动nginx容器
docker start container_id
暂停容器
docker pause container_id
停止暂停
docker unpause container_id
停止容器
docker stop container_id
杀死一个容器
docker kill container_id
删除容器
docker rm container_id
</code></pre>
<h3><a id="%E4%BB%A5server%E7%9A%84%E5%BD%A2%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B" class="anchor" aria-hidden="true" href="#%E4%BB%A5server%E7%9A%84%E5%BD%A2%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B"><span class="octicon octicon-link"></span></a>以server的形式，启动一个后台运行的进程</h3>
<pre class="line-numbers"><code>docker run -d redis:3.2 redis-server
</code></pre>
<blockquote>
<p>-d 表示后台启动
redis:3.2 表示运行一个3.2版本的Redis服务
redis-server 表示已服务的方式启动，不加此项，不会启动主进程</p>
</blockquote>
<h3><a id="%E6%9C%AC%E6%9C%BA%E7%AB%AF%E5%8F%A3%E4%B8%8E%E9%95%9C%E5%83%8F%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E7%9A%84%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8" class="anchor" aria-hidden="true" href="#%E6%9C%AC%E6%9C%BA%E7%AB%AF%E5%8F%A3%E4%B8%8E%E9%95%9C%E5%83%8F%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E7%9A%84%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8"><span class="octicon octicon-link"></span></a>本机端口与镜像端口映射的方式启动</h3>
<pre class="line-numbers"><code>docker run -d -p 80:80 nginx
</code></pre>
<blockquote>
<p>-p 80:80 表示把本地物理机的80端口和NGINX镜像的80端口绑定，前面是物理机的端口，后面的是镜像的端口</p>
</blockquote>
<h3><a id="%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8C%82%E8%BD%BD%E5%88%B0docker%E9%95%9C%E5%83%8F%E5%86%85" class="anchor" aria-hidden="true" href="#%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8C%82%E8%BD%BD%E5%88%B0docker%E9%95%9C%E5%83%8F%E5%86%85"><span class="octicon octicon-link"></span></a>本地文件夹挂载到docker镜像内</h3>
<pre class="line-numbers"><code>docker run -d -p 80:80 -v 本地文件夹:镜像文件夹 nginx
</code></pre>
<blockquote>
<p>-v 表示将本地文件夹挂载到镜像中去，实现镜像与宿主机文件共享</p>
</blockquote>
<h2><a id="%E4%B8%8E%E5%AE%B9%E5%99%A8%E4%BA%A4%E4%BA%92" class="anchor" aria-hidden="true" href="#%E4%B8%8E%E5%AE%B9%E5%99%A8%E4%BA%A4%E4%BA%92"><span class="octicon octicon-link"></span></a>与容器交互</h2>
<pre class="line-numbers"><code>docker exec -it container_id redis-cli
</code></pre>
<blockquote>
<p>-it 表示这个命令是和终端有交互的
container_id 表示容器的短名称，可以使用docker ps 命令查看
redis-cli 表示使用redis-cli的方式进行交互，如果使用bash，表示使用bash进行交互</p>
</blockquote>
<h2><a id="%E6%89%93%E5%8C%85%E6%88%90%E9%95%9C%E5%83%8F" class="anchor" aria-hidden="true" href="#%E6%89%93%E5%8C%85%E6%88%90%E9%95%9C%E5%83%8F"><span class="octicon octicon-link"></span></a>打包成镜像</h2>
<pre class="line-numbers"><code>docker commit 
</code></pre>
<blockquote>
<p>docker commit用来将程序打包成镜像，通常项目中使用Dockerfile的方式实现</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ安装]]></title>
    <link href="jythons.github.io/16116746644581.html"/>
    <updated>2021-01-26T23:24:24+08:00</updated>
    <id>jythons.github.io/16116746644581.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<h2><a id="%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E8%BD%AF%E4%BB%B6%E5%8C%85%EF%BC%9A" class="anchor" aria-hidden="true" href="#%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E8%BD%AF%E4%BB%B6%E5%8C%85%EF%BC%9A"><span class="octicon octicon-link"></span></a>下载所需软件包：</h2>
<p>erlang、socat、rabbitmq-server的rpm包</p>
<h2><a id="%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true" href="#%E5%AE%89%E8%A3%85"><span class="octicon octicon-link"></span></a>安装</h2>
<pre class="line-numbers"><code>rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-17.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm
</code></pre>
<h2><a id="%E5%90%AF%E5%8A%A8" class="anchor" aria-hidden="true" href="#%E5%90%AF%E5%8A%A8"><span class="octicon octicon-link"></span></a>启动</h2>
<pre class="line-numbers"><code>sbin]$ ./rabbitmq-server -detached
</code></pre>
<h2><a id="%E9%80%80%E5%87%BA" class="anchor" aria-hidden="true" href="#%E9%80%80%E5%87%BA"><span class="octicon octicon-link"></span></a>退出</h2>
<pre class="line-numbers"><code>./rabbitmqctl stop
</code></pre>
<h2><a id="%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7" class="anchor" aria-hidden="true" href="#%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7"><span class="octicon octicon-link"></span></a>启动管理工具</h2>
<pre class="line-numbers"><code>sbin]$ ./rabbitmq-plugins enable rabbitmq_management
</code></pre>
<blockquote>
<p>使用RabbitMQ 管理工具登录时，提示guest用户只能本地登录，解决方法如下：
./rabbitmqctl add_user jythons jythons
./rabbitmqctl set_permissions -p / jythons &quot;.<em>&quot; &quot;.</em>&quot; &quot;.*&quot;
./rabbitmqctl set_user_tags jythons administrator</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ]]></title>
    <link href="jythons.github.io/16115835473812.html"/>
    <updated>2021-01-25T22:05:47+08:00</updated>
    <id>jythons.github.io/16115835473812.html</id>
    <content type="html"><![CDATA[
<p>RabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写的，并且RabbitMQ是基于AMQP协议的。</p>
<span id="more"></span><!-- more -->
<h2><a id="1-amqp%E5%8D%8F%E8%AE%AE" class="anchor" aria-hidden="true" href="#1-amqp%E5%8D%8F%E8%AE%AE"><span class="octicon octicon-link"></span></a>1 AMQP协议</h2>
<p>AMQP协议是具有现代特征的二进制协议，是一个提供统一消息服务的应用层标准高级消息队列协议，是应用成协议的一个开放标准，为面向消息值得中间件设计。</p>
<h3><a id="1-1-amqp%E6%9E%B6%E6%9E%84%E5%9B%BE" class="anchor" aria-hidden="true" href="#1-1-amqp%E6%9E%B6%E6%9E%84%E5%9B%BE"><span class="octicon octicon-link"></span></a>1.1 AMQP架构图</h3>
<p><img src="media/16115835473812/AMQP%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="AMQP架构图" />
Publisher生产者，将消息投递到RabbitMQ的Exchange交换机，Exchange与MessageQueue相关联，然后Consumer消费者从Message队列中获取响应的消息。</p>
<h3><a id="1-2-amqp%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5" class="anchor" aria-hidden="true" href="#1-2-amqp%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5"><span class="octicon octicon-link"></span></a>1.2 AMQP核心概念</h3>
<p><strong>Server</strong>：又称Broker，接受客户端的连接，实现AMQP实体服务
<strong>Connection</strong>：连接，应用程序与Broker的网络连接
<strong>Channel</strong>：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个CHannel，每个Channel代表一个会话任务
<strong>Message</strong>：消息，服务器和应用程序之间传送的数据，由Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body则就是消息体内容
<strong>Virtual Host</strong>：虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个Virtual Host里面可以有若干个Exchange和Queue，同一个Virtual Host里面不能有相同名称的Exchange或Queue
<strong>Exchange</strong>：交换机，接受消息，根据路由键转发消息到绑定的队列
<strong>Binding</strong>：Exchange和Queue之间的虚拟连接，binding中可以包含routing key
<strong>Routing key</strong>: 一个路由规则，虚拟机可用它来确定如何路由一个特定消息
<strong>Queue</strong>：也称为Message Queue，消息队列，保存消息并将它们转发给消费者</p>
<h2><a id="2%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E6%B6%88%E6%81%AF-100%E6%8A%95%E9%80%92%E6%88%90%E5%8A%9F" class="anchor" aria-hidden="true" href="#2%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E6%B6%88%E6%81%AF-100%E6%8A%95%E9%80%92%E6%88%90%E5%8A%9F"><span class="octicon octicon-link"></span></a>2 如何保障消息100%投递成功</h2>
<h3><a id="2-1%E7%94%9F%E4%BA%A7%E7%AB%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92" class="anchor" aria-hidden="true" href="#2-1%E7%94%9F%E4%BA%A7%E7%AB%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92"><span class="octicon octicon-link"></span></a>2.1 生产端的可靠性投递</h3>
<ul>
<li>保障消息的成功发出</li>
<li>保障MQ节点的成功接收</li>
<li>发送端收到MQ节点（Broker）确认应答</li>
<li>完善的消息进行补偿机制</li>
</ul>
<h3><a id="2-2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" class="anchor" aria-hidden="true" href="#2-2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88"><span class="octicon octicon-link"></span></a>2.2 解决方案</h3>
<ul>
<li>消息落库，对消息状态进行打标（适合流量小的系统 ）</li>
<li>消息的延迟投递，做二次确认，回调检查</li>
</ul>
<h2><a id="3%E6%B6%88%E8%B4%B9%E7%AB%AF%E5%B9%82%E7%AD%89%E6%80%A7%E4%BF%9D%E9%9A%9C" class="anchor" aria-hidden="true" href="#3%E6%B6%88%E8%B4%B9%E7%AB%AF%E5%B9%82%E7%AD%89%E6%80%A7%E4%BF%9D%E9%9A%9C"><span class="octicon octicon-link"></span></a>3 消费端幂等性保障</h2>
<ul>
<li>唯一ID + 指纹码机制
<ul>
<li>唯一ID + 指纹码机制，利用数据库主键去重</li>
<li>select count(1) from table where id=唯一ID+指纹码</li>
<li>好处：实现简单</li>
<li>坏处：高并发下有数据库写入的性能瓶颈</li>
</ul>
</li>
<li>利用Redis原子特性实现
<ul>
<li>考虑数据是否需要落库，如果落库，怎么保证Redis和db的数据原子性</li>
<li>如果不落库，怎样设置定时同步策略</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kafka介绍与高性能分析]]></title>
    <link href="jythons.github.io/16115028294909.html"/>
    <updated>2021-01-24T23:40:29+08:00</updated>
    <id>jythons.github.io/16115028294909.html</id>
    <content type="html"><![CDATA[
<p>Kafka是LinkedIn开源的分布式消息系统，目前归属于Apache顶级项目，Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。
Kafka0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。</p>
<span id="more"></span><!-- more -->
<h2><a id="1-kafka%E7%89%B9%E7%82%B9" class="anchor" aria-hidden="true" href="#1-kafka%E7%89%B9%E7%82%B9"><span class="octicon octicon-link"></span></a>1 Kafka特点</h2>
<ul>
<li>支持分布式，支持消息分区的概念，他的生产者和消费者是一一对应的，否则会造成资源的浪费</li>
<li>跨平台，支持多种语言</li>
<li>实时性，数据支持实时处理和离线处理，只要存储足够，即使消息堆积上亿级别也是可以的</li>
<li>伸缩性，支持水平扩展</li>
</ul>
<h2><a id="2-kafka%E9%AB%98%E6%80%A7%E8%83%BD" class="anchor" aria-hidden="true" href="#2-kafka%E9%AB%98%E6%80%A7%E8%83%BD"><span class="octicon octicon-link"></span></a>2 Kafka高性能</h2>
<ul>
<li>顺序写，Page Cache空中接力，高效读写
<ul>
<li>顺序写可以提高磁盘的利用率，消费者可以顺序不删除消费，避免磁盘的随机写</li>
<li>Page Cache （TODO）</li>
</ul>
</li>
<li>高性能、高吞吐</li>
<li>后台异步、主动Flush</li>
<li>预读策略、IO调度</li>
</ul>
<h3><a id="2-1-page-cache" class="anchor" aria-hidden="true" href="#2-1-page-cache"><span class="octicon octicon-link"></span></a>2.1 Page Cache</h3>
<p>Page Cache是操作系统主要实现的一种磁盘缓存机制，他的目的是减少磁盘IO的操作，因为频繁的磁盘IO操作，会影响系统的性能。具体来说就是讲磁盘中的数据缓存到内存中，把对磁盘的访问变成对内存的访问。
<img src="media/16115028294909/PageCache.png" alt="PageCache" />
上图所示，应用程序想获取相应的数据时，首先会在内存中查询，看是否存在想要的数据，如果存在，直接返回，若不存在，则需要对磁盘发起IO请求，获取到数据之后，首先会将数据加入到缓存页中，去做一个缓存，然后在返回给应用程序进程。
当应用程序想将数据写入到磁盘中时，同样也会先去缓存区中check是否存在，如果不存在，会先在缓存区创建一个页，将数据先写入到缓存页中，操作系统会通过自行调度将数据写入硬盘中。
上图流程中，对数据一共做了4次copy，通常常用的是zerocopy。</p>
<h3><a id="2-2-zerocopy" class="anchor" aria-hidden="true" href="#2-2-zerocopy"><span class="octicon octicon-link"></span></a>2.2 ZeroCopy</h3>
<p><img src="media/16115028294909/zerocopy.png" alt="zerocopy" />
Kafka内部使用了大量的PageCache，ZeroCopy，这是它高性能高吞吐的重要原因。
上图从磁盘将数据写入到内核缓冲区后，直接将数据写入到网卡接口，发送给消费者去消费，如果有多个消费者，也都是从同一个缓冲区直接写入，从而实现了0拷贝。</p>
<h2><a id="3-kafka%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#3-kafka%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>3 Kafka集群模式</h2>
<p><img src="media/16115028294909/kafka%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F.png" alt="kafka集群模式" />
Kafka使用Zookeeper来协调，kafka大部分时间都是采用内存级别的存储，当生产者和消费者速率相当的时候，它很少回去向磁盘中存取数据，并且它采用内存级别的副本来实现数据的可靠性，当一个节点宕机后，会由其他节点继续提供服务。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ集群架构模型和原理解析]]></title>
    <link href="jythons.github.io/16114984325290.html"/>
    <updated>2021-01-24T22:27:12+08:00</updated>
    <id>jythons.github.io/16114984325290.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<h2><a id="1-rabbitmq%E4%B8%BB%E5%A4%87%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#1-rabbitmq%E4%B8%BB%E5%A4%87%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>1 RabbitMQ 主备模式</h2>
<p>Warren，一个主/备方案（主节点如果挂了，从节点提供服务，和ActiveMQ利用Zookeeper做主/备一样）
<img src="media/16114984325290/RabbitMQ%E4%B8%BB%E5%A4%87%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="RabbitMQ主备原理图" />
它是由HaProxy路由到主节点，由主节点提供服务，当主节点发生故障时，HaProxy会帮我们把请求路由到备份节点，继续提供服务。当原来的主节点恢复了之后，他会成为原来备份节点的备份节点。</p>
<h3><a id="1-1%E4%B8%BB%E5%A4%87%E6%A8%A1%E5%BC%8F-haproxy%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true" href="#1-1%E4%B8%BB%E5%A4%87%E6%A8%A1%E5%BC%8F-haproxy%E9%85%8D%E7%BD%AE"><span class="octicon octicon-link"></span></a>1.1 主备模式 - HaProxy配置</h3>
<pre class="line-numbers"><code># 集群名字 
listen rabbitmq_cluster
# 配置TCP模式
bind 0.0.0.0:5672
# 简单的轮询
mode tcp
# 主节点
balance roundrobin
# 主节点，5秒钟检查一次，如果连续两次失败，则切换主节点
server bhz76 192.168.11.76:5672 check inter 5000 rise 2 fall 2
# 备用节点
server bhz77 192.168.11.77:5672 backup check inter 5000 rise 2 fall 2
</code></pre>
<h2><a id="2%E8%BF%9C%E7%A8%8B%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#2%E8%BF%9C%E7%A8%8B%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>2 远程模式</h2>
<p>远程模式，是远距离通信和复制，可以实现双活的一种模式，简称Shovel模式。
所谓Shovel就是我们可以把消息进行不同数据中心的复制工作，可以跨地域的让两个mq集群互联
这种模式，目前使用比较少，因为他的可靠性有待提高，并且他的配置也比较麻烦。</p>
<h3><a id="2-1-shovel%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B" class="anchor" aria-hidden="true" href="#2-1-shovel%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B"><span class="octicon octicon-link"></span></a>2.1 Shovel架构模型</h3>
<p>当我们请求到RabbitMQ服务时，请求可以转发到下游的RabbitMQ服务去处理，他不但可以起到容灾的作用，也可以提高请求处理的效率。
比如有一个订单系统，使用了Shovel插件后，模型变成了近端同步确认，远端异步确认的方式，大大提高了订单确认速度，并且还能保证可靠性。
<img src="media/16114984325290/Shovel%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B.png" alt="Shovel架构模型" /></p>
<h3><a id="2-2-shovel%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4" class="anchor" aria-hidden="true" href="#2-2-shovel%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4"><span class="octicon octicon-link"></span></a>2.2 Shovel集群配置步骤</h3>
<ul>
<li>启动RabbitMQ插件
<ul>
<li>rabbitmq-plugins enable amqp_client</li>
<li>rabbitmq-plugins enable rabbitmq_shovel</li>
</ul>
</li>
<li>创建rabbitmq.config文件</li>
<li>源与目的地服务器使用相同的配置文件</li>
</ul>
<h2><a id="3%E9%95%9C%E5%83%8F%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#3%E9%95%9C%E5%83%8F%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>3 镜像模式</h2>
<p>集群模式非常经典的就是Mirror镜像模式，保证100%数据不丢失。
这种模式在实际工作中用的最多，并且实现集群非常简单，一般的互联网大厂都会构建这种镜像集群模式。
Mirror镜像队列是高可靠的，它是内部是使用的数据同步，RabbitMQ底层是使用Erlang去实现的，是天然的交换机的方式，和原生socket一样低的延迟，在数据同步的时候，他的性能是非常好的。
并且我们在搭建集群的时候，一般采用奇数个节点，奇数个节点可以防止集群发生脑裂的现象。</p>
<h3><a id="3-1-rabbitmq%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%9B%BE" class="anchor" aria-hidden="true" href="#3-1-rabbitmq%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%9B%BE"><span class="octicon octicon-link"></span></a>3.1 RabbitMQ集群架构图</h3>
<p><img src="media/16114984325290/RabbitMQ%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="RabbitMQ集群架构图" />
最底层的三个是完全相同的RabbitMQ服务，中间层是两个HaProxy代理，负责去路由请求，其中使用KeepAlived实现故障转移，高可用。
这种部署的方式是有缺陷的，它不能支持横向的扩展，因为他的数据存储能力是有限的，当流量比较大的时候，由于消费能力不足，导致数据堆积比较大，这时即使在扩展一个服务，只会增加服务的负担，增加几个节点，就需要多同步几份数据。如果要更好的实现横向扩展，可以使用多活模式。</p>
<h2><a id="4%E5%A4%9A%E6%B4%BB%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#4%E5%A4%9A%E6%B4%BB%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>4 多活模式</h2>
<p>这种模式也是实现异地数据复制的主流模式，因为Shovel模式配置比较复杂，所以一般来说实现异地集群都是使用这种双活或者多活模型来实现的。
这种模型需要依赖RabbitMQ的federation插件，可以实现持续的可靠的AMQP数据通信，多活模式实际配置与应用非常简单。
RabbitMQ部署架构采用双中心模式（多中心），那么在两套（或多套）数据中心中各部署一套RabbitMQ集群，各中心的RabbitMQ服务除了需要为业务提供正常的消息服务外，中心之间还需要实现部分队列消息共享。</p>
<h3><a id="4-1%E5%A4%9A%E6%B4%BB%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%9B%BE" class="anchor" aria-hidden="true" href="#4-1%E5%A4%9A%E6%B4%BB%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%9B%BE"><span class="octicon octicon-link"></span></a>4.1 多活集群架构图</h3>
<p><img src="media/16114984325290/%E5%A4%9A%E6%B4%BB%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="多活集群架构图" /></p>
<h3><a id="4-2%E5%A4%9A%E6%B4%BB%E6%A8%A1%E5%BC%8F-federation%E6%8F%92%E4%BB%B6" class="anchor" aria-hidden="true" href="#4-2%E5%A4%9A%E6%B4%BB%E6%A8%A1%E5%BC%8F-federation%E6%8F%92%E4%BB%B6"><span class="octicon octicon-link"></span></a>4.2 多活模式 - Federation插件</h3>
<p>Federation插件是一个不需要构建Cluster，而在Brokers之间传输消息的高性能插件，Federation插件可以在Brokers或者Cluster之间传输消息，连接的双方可以使用不同的users和virtual hosts，双方也可以使用版本不同的RabbitMQ和Erlang。Federation插件使用AMQP协议通讯，可以接受不连续的传输。</p>
<p>Federation Exchanges，可以看成Downstream从Upstream主动拉取消息，但并不是拉取所有消息，必须是在Downstream上已经明确定义Bindings关系的Exchange，也就是有实际的物理Queue来接受消息，才会从Upstream拉取消息到Downstream。使用AMQP协议实施代理间通信，Downstream会将绑定关系组合在一起，绑定、解除绑定命令将发送到Upstream交换机。因此，Federation Exchange只接受具有订阅的消息（本处贴出官方图来说明）；
<img src="media/16114984325290/Federation%E6%8F%92%E4%BB%B6.png" alt="Federation插件" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式消息队列（MQ）]]></title>
    <link href="jythons.github.io/16114877964866.html"/>
    <updated>2021-01-24T19:29:56+08:00</updated>
    <id>jythons.github.io/16114877964866.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->
<h2><a id="1%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" class="anchor" aria-hidden="true" href="#1%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"><span class="octicon octicon-link"></span></a>1 应用场景</h2>
<ul>
<li>服务解耦</li>
<li>削峰填谷</li>
<li>异步化缓冲</li>
</ul>
<h2><a id="2%E5%BA%94%E7%94%A8%E6%80%9D%E8%80%83%E7%82%B9" class="anchor" aria-hidden="true" href="#2%E5%BA%94%E7%94%A8%E6%80%9D%E8%80%83%E7%82%B9"><span class="octicon octicon-link"></span></a>2 应用思考点</h2>
<ul>
<li>生产端可靠性投递
<ul>
<li>生产端消息发布出去后，要保持和数据库的原子性</li>
</ul>
</li>
<li>消费端幂等
<ul>
<li>消费端不能消费一次</li>
</ul>
</li>
<li>高可用</li>
<li>低延迟</li>
<li>消息可靠性</li>
<li>消息的堆积能力
<ul>
<li>消息在高峰期最大能堆积的程度</li>
</ul>
</li>
<li>扩展性
<ul>
<li>是否能够支持无感知的扩容</li>
</ul>
</li>
</ul>
<h2><a id="3%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E5%85%B3%E6%B3%A8%E7%82%B9" class="anchor" aria-hidden="true" href="#3%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E5%85%B3%E6%B3%A8%E7%82%B9"><span class="octicon octicon-link"></span></a>3 技术选型关注点</h2>
<p>技术选型主要关注一下几点：</p>
<ul>
<li>各个MQ的性能、优缺点、相对的业务场景</li>
<li>集群架构模式，分布式、可扩展、高可用、可维护性</li>
<li>综合成本问题，集群规模，人员成本</li>
<li>未来的方向、规划、思考</li>
</ul>
<h3><a id="3-1-activemq" class="anchor" aria-hidden="true" href="#3-1-activemq"><span class="octicon octicon-link"></span></a>3.1 ActiveMQ</h3>
<p>如果系统存在大流量，高并发场景，ActiveMQ是不适合的，它适合一些中小型公司或者公司业务边缘模块的系统使用。</p>
<h3><a id="3-2-rabbitmq" class="anchor" aria-hidden="true" href="#3-2-rabbitmq"><span class="octicon octicon-link"></span></a>3.2 RabbitMQ</h3>
<p>RabbitMQ比较适合大流量，高并发等应用场景，他有镜像队列来保证数据不会丢失，对可靠性和高可用有保障。但是他的横向拓展能力不是很好。</p>
<h4><a id="3-2-1-rabbitmq%E5%9B%9B%E7%A7%8D%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84" class="anchor" aria-hidden="true" href="#3-2-1-rabbitmq%E5%9B%9B%E7%A7%8D%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84"><span class="octicon octicon-link"></span></a>3.2.1 RabbitMQ四种集群架构</h4>
<h5><a id="3-2-1-1%E4%B8%BB%E5%A4%87%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#3-2-1-1%E4%B8%BB%E5%A4%87%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>3.2.1.1 主备模式</h5>
<p>主备模式可以理解为热备份，他分为master和slave，master是对外开放的，主要用于读写操作，而slave通常用于备份，当master节点挂掉之后，slave节点会被升级为master继续对外提供服务。</p>
<h5><a id="3-2-1-2%E8%BF%9C%E7%A8%8B%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#3-2-1-2%E8%BF%9C%E7%A8%8B%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>3.2.1.2 远程模式</h5>
<p>远程模式是RabbitMQ早期版本提供的多活的模式，主要是提供异地容灾转移的，当当前节点处理不过来请求时，可以转发到下游节点去处理（架构简单，配置复杂）</p>
<h5><a id="3-2-1-3%E9%95%9C%E5%83%8F%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#3-2-1-3%E9%95%9C%E5%83%8F%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>3.2.1.3 镜像模式</h5>
<p>镜像模式是业界使用较多的模式，可以保证消息的可靠性。</p>
<h5><a id="3-2-1-4%E5%A4%9A%E6%B4%BB%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true" href="#3-2-1-4%E5%A4%9A%E6%B4%BB%E6%A8%A1%E5%BC%8F"><span class="octicon octicon-link"></span></a>3.2.1.4 多活模式</h5>
<p>多活模式和远程模式差不多，主要用于异地容灾多活，数据转储和数据转发的功能</p>
<h3><a id="3-3-rocketmq" class="anchor" aria-hidden="true" href="#3-3-rocketmq"><span class="octicon octicon-link"></span></a>3.3 RocketMQ</h3>
<p>他的可拓展性比较好，高可用性也不错，但是可维护性相对比较麻烦</p>
<h3><a id="3-4-kafka" class="anchor" aria-hidden="true" href="#3-4-kafka"><span class="octicon octicon-link"></span></a>3.4 kafka</h3>
<p>kafka可以在很廉价的机器上发挥出很高的性能</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logstatsh]]></title>
    <link href="jythons.github.io/16114678960162.html"/>
    <updated>2021-01-24T13:58:16+08:00</updated>
    <id>jythons.github.io/16114678960162.html</id>
    <content type="html"><![CDATA[
<p>logstash主要是用于数据库的数据采集、转换、充实，然后输出到ES。</p>
<span id="more"></span><!-- more -->
<h2><a id="%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true" href="#%E5%AE%89%E8%A3%85"><span class="octicon octicon-link"></span></a>安装</h2>
<p>下载安装包，解压即可。</p>
<h2><a id="%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5" class="anchor" aria-hidden="true" href="#%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5"><span class="octicon octicon-link"></span></a>数据同步</h2>
<p>在logstash根目录下创建sync目录。创建配置文件：logstash-db-sync.conf。
接下来下载mysql驱动到sync目录下。（msyql-connector-java-5.1.41.jar）
配置文件内容如下：</p>
<pre class="line-numbers"><code>input {
    jdbc {
        # 设置MySQL/MariaDB数据库URL以及数据库名称
        jdbc_connection_string =&gt; &quot;jdbc:mysql://192.168.1.6：3306/dbname?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&quot;
        jdbc_user =&gt; &quot;root&quot;
        jdbc_password =&gt; &quot;root&quot;
        # 数据库驱动所在位置，可以是绝对路径或者相对路径
        jdbc_driver_library =&gt; &quot;./msyql-connector-java-5.1.41.jar&quot;
        # 驱动类名
        jdbc_driver_class =&gt; &quot;com.mysql.jdbc_Driver&quot;
        # 开启分页
        jdbc_page_size =&gt; &quot;10000&quot;
        # 执行的sql文件路径
        statement_filepath =&gt; &quot;/usr/local/logstash-6.4.3/sync/example.sql&quot;
        # 设置定时任务间隔，含义：分、时、天、月、年，全部为*默认含义为每分钟跑一次
        schedule =&gt; &quot;* * * * *&quot;
        # 索引类型
        type =&gt; &quot;_doc&quot;
        # 是否开启记录上次追踪的结果，也就是上次更新的时间，这个会记录到 last_run_meatdata_path 的文件
        use_column_value =&gt; true
        # 记录上一次追踪的结果值
        last_run_metadata_path =&gt; &quot;/usr/local/logstash-6.4.3/sync/track_time&quot;
        # 如果use_column_value为true，配置本参数，追踪的column名，可以是自增id或者时间
        tracking_column =&gt; &quot;updated_time&quot;
        # tracking_column对应的字段的类型
        tracking_column_type =&gt; &quot;timestamp&quot;
        # 是否清除 last_run_metadata_path 的记录，true则每次都从开头开始查询所有的数据库记录
        clean_run =&gt; false
        # 数据库字段名称大写转小写
        lowercase_column_names =&gt; false
    }
}
output {
    elasticsearch {
        # es地址
        hosts =&gt; [&quot;192.168.3.214:9200&quot;]
        # 同步的索引名
        index =&gt; &quot;index-name&quot;
        # 设置_docID和数据相同
        document_id =&gt; &quot;%{id}&quot;
        
        # 定义模板名称
        template_name =&gt; &quot;myik&quot;
        # 模板所在位置
        template =&gt; &quot;/usr/local/logstash-6.4.3/sync/logstash-ik.json&quot;
        # 重写模板
        template_overwrite =&gt; true
        # 默认为true, false关闭logstash自动管理模板功能，如果自定义模板，则设置为false
        manage_template =&gt; false
    }
    # 日志输出
    stdout {
        codec =&gt; json_lines
    }
}
</code></pre>
<h2><a id="%E5%90%AF%E5%8A%A8logstash" class="anchor" aria-hidden="true" href="#%E5%90%AF%E5%8A%A8logstash"><span class="octicon octicon-link"></span></a>启动logstash</h2>
<pre class="line-numbers"><code>./bin/logstash -f /usr/local/logstash-6.4.3/sync/logstash-db-sync.conf
</code></pre>

]]></content>
  </entry>
  
</feed>
