<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jythons小站]]></title>
  <link href="jythons.github.io/atom.xml" rel="self"/>
  <link href="jythons.github.io/"/>
  <updated>2022-08-30T11:57:39+08:00</updated>
  <id>jythons.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[不保留本地修改]]></title>
    <link href="jythons.github.io/16602701188846.html"/>
    <updated>2022-08-12T10:08:38+08:00</updated>
    <id>jythons.github.io/16602701188846.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E8%83%8C%E6%99%AF" class="anchor" aria-hidden="true" href="#1%E8%83%8C%E6%99%AF"><span class="octicon octicon-link"></span></a>1.背景</h2>
<p>当前分支代码做了一些没用的修改甚至还commit了，不保留本地的修改。</p>
<h2><a id="2%E6%93%8D%E4%BD%9C" class="anchor" aria-hidden="true" href="#2%E6%93%8D%E4%BD%9C"><span class="octicon octicon-link"></span></a>2.操作</h2>
<ul>
<li>先同步远端信息</li>
</ul>
<pre class="line-numbers"><code class="language-bash">git fetch --all
</code></pre>
<ul>
<li>可以通过将本地的git指针指向远端某个分支</li>
</ul>
<pre class="line-numbers"><code class="language-bash">git reset --hard origin/远端分支名
</code></pre>
<ul>
<li>再pull更新本地代码</li>
</ul>
<pre class="line-numbers"><code class="language-bash">git pull origin 远端分支名
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Npm源修改]]></title>
    <link href="jythons.github.io/16576035901040.html"/>
    <updated>2022-07-12T13:26:30+08:00</updated>
    <id>jythons.github.io/16576035901040.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E8%83%8C%E6%99%AF" class="anchor" aria-hidden="true" href="#1%E8%83%8C%E6%99%AF"><span class="octicon octicon-link"></span></a>1. 背景</h2>
<p>刚安装好nodejs环境时，由于npm的源默认是官方源，国内访问部分依赖包的时候，被墙，为了加快安装，国内有很多npm源可以选择，比较有名的就是淘宝npm镜像。</p>
<h2><a id="2%E4%B8%B4%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E6%BA%90" class="anchor" aria-hidden="true" href="#2%E4%B8%B4%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E6%BA%90"><span class="octicon octicon-link"></span></a>2. 临时使用淘宝源</h2>
<p>在 npm install XXX 时加入--registry URL即可，不会影响到本地配置，如：</p>
<pre class="line-numbers"><code>npm install 包名 --registry https://registry.npm.taobao.org 
</code></pre>
<h2><a id="3%E6%8C%81%E4%B9%85%E4%BD%BF%E7%94%A8" class="anchor" aria-hidden="true" href="#3%E6%8C%81%E4%B9%85%E4%BD%BF%E7%94%A8"><span class="octicon octicon-link"></span></a>3. 持久使用</h2>
<p>永久修改本地npm的配置：</p>
<pre class="line-numbers"><code>npm config set registry https://registry.npm.taobao.org
</code></pre>
<h2><a id="4%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4" class="anchor" aria-hidden="true" href="#4%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4"><span class="octicon octicon-link"></span></a>4. 其他命令</h2>
<p>查看npm源地址有没有换成功：</p>
<pre class="line-numbers"><code>npm config get registry
</code></pre>
<h2><a id="5%E9%87%8D%E7%BD%AE%E4%B8%BA%E5%AE%98%E6%96%B9%E6%BA%90" class="anchor" aria-hidden="true" href="#5%E9%87%8D%E7%BD%AE%E4%B8%BA%E5%AE%98%E6%96%B9%E6%BA%90"><span class="octicon octicon-link"></span></a>5. 重置为官方源</h2>
<pre class="line-numbers"><code>npm config set registry https://registry.npmjs.org/
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel动态创建表]]></title>
    <link href="jythons.github.io/16575934400731.html"/>
    <updated>2022-07-12T10:37:20+08:00</updated>
    <id>jythons.github.io/16575934400731.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-php">if(!Schema::hasTable(‘表名称’)){ //添加前检测表是否存在
Schema::create(‘表名称’, function ($table) { //添加表
$table-&gt;increments(‘id’); //主键
$table-&gt;string(‘name’); //列名
//字段类型
$table-&gt;bigIncrements(‘id’); 自增ID，类型为bigint
$table-&gt;bigInteger(‘votes’); 等同于数据库中的BIGINT类型
$table-&gt;binary(‘data’); 等同于数据库中的BLOB类型
$table-&gt;boolean(‘confirmed’); 等同于数据库中的BOOLEAN类型
$table-&gt;char(‘name’, 4); 等同于数据库中的CHAR类型
$table-&gt;date(‘created_at’); 等同于数据库中的DATE类型
$table-&gt;dateTime(‘created_at’); 等同于数据库中的DATETIME类型
$table-&gt;dateTimeTz(‘created_at’); 等同于数据库中的DATETIME类型（带时区）
$table-&gt;decimal(‘amount’, 5, 2); 等同于数据库中的DECIMAL类型，带一个精度和范围
$table-&gt;double(‘column’, 15, 8); 等同于数据库中的DOUBLE类型，带精度, 总共15位数字，小数点后8位.
$table-&gt;enum(‘choices’, [‘foo’, ‘bar’]); 等同于数据库中的 ENUM类型
$table-&gt;float(‘amount’); 等同于数据库中的 FLOAT 类型
$table-&gt;increments(‘id’); 数据库主键自增ID
$table-&gt;integer(‘votes’); 等同于数据库中的 INTEGER 类型
$table-&gt;ipAddress(‘visitor’); 等同于数据库中的 IP 地址
$table-&gt;json(‘options’); 等同于数据库中的 JSON 类型
$table-&gt;jsonb(‘options’); 等同于数据库中的 JSONB 类型
$table-&gt;longText(‘description’); 等同于数据库中的 LONGTEXT 类型
$table-&gt;macAddress(‘device’); 等同于数据库中的 MAC 地址
$table-&gt;mediumIncrements(‘id’); 自增ID，类型为无符号的mediumint
$table-&gt;mediumInteger(‘numbers’); 等同于数据库中的 MEDIUMINT类型
$table-&gt;mediumText(‘description’); 等同于数据库中的 MEDIUMTEXT类型
$table-&gt;morphs(‘taggable’); 添加一个 INTEGER类型的 taggable_id 列和一个 STRING类型的 taggable_type列
$table-&gt;nullableTimestamps(); 和 timestamps()一样但允许 NULL值.
$table-&gt;rememberToken(); 添加一个 remember_token 列： VARCHAR(100) NULL.
$table-&gt;smallIncrements(‘id’); 自增ID，类型为无符号的smallint
$table-&gt;smallInteger(‘votes’); 等同于数据库中的 SMALLINT 类型
$table-&gt;softDeletes(); 新增一个 deleted_at 列 用于软删除.
$table-&gt;string(‘email’); 等同于数据库中的 VARCHAR 列 .
$table-&gt;string(‘name’, 100); 等同于数据库中的 VARCHAR，带一个长度
$table-&gt;text(‘description’); 等同于数据库中的 TEXT 类型
$table-&gt;time(‘sunrise’); 等同于数据库中的 TIME类型
$table-&gt;timeTz(‘sunrise’); 等同于数据库中的 TIME 类型（带时区）
$table-&gt;tinyInteger(‘numbers’); 等同于数据库中的 TINYINT 类型
$table-&gt;timestamp(‘added_on’); 等同于数据库中的 TIMESTAMP 类型
$table-&gt;timestampTz(‘added_on’); 等同于数据库中的 TIMESTAMP 类型（带时区）
$table-&gt;timestamps(); 添加 created_at 和 updated_at列
$table-&gt;timestampsTz(); 添加 created_at 和 updated_at列（带时区）
$table-&gt;unsignedBigInteger(‘votes’); 等同于数据库中无符号的 BIGINT 类型
$table-&gt;unsignedInteger(‘votes’); 等同于数据库中无符号的 INT 类型
$table-&gt;unsignedMediumInteger(‘votes’); 等同于数据库中无符号的 MEDIUMINT 类型
$table-&gt;unsignedSmallInteger(‘votes’); 等同于数据库中无符号的 SMALLINT 类型
$table-&gt;unsignedTinyInteger(‘votes’); 等同于数据库中无符号的 TINYINT 类型
$table-&gt;uuid(‘id’); 等同于数据库的UUID
</code></pre>
<pre class="line-numbers"><code class="language-php">默认等等：
-&gt;after(‘column’) 将该列置于另一个列之后 (仅适用于MySQL)
-&gt;comment(‘my comment’) 添加注释信息
-&gt;default( v a l u e ) 指 定 列 的 默 认 值 − &amp;gt; f i r s t ( ) 将 该 列 置 为 表 中 第 一 个 列 ( 仅 适 用 于 M y S Q L ) − &amp;gt; n u l l a b l e ( ) 允 许 该 列 的 值 为 N U L L − &amp;gt; s t o r e d A s ( value) 指定列的默认值 -&amp;gt;first() 将该列置为表中第一个列 (仅适用于MySQL) -&amp;gt;nullable() 允许该列的值为NULL -&amp;gt;storedAs( value)指定列的默认值−&gt;first()将该列置为表中第一个列(仅适用于MySQL)−&gt;nullable()允许该列的值为NULL−&gt;storedAs(expression) 创建一个存储生成列（只支持MySQL）
-&gt;unsigned() 设置 integer 列为 UNSIGNED
-&gt;virtualAs($expression) 创建一个虚拟生成列（只支持MySQL）

索引等等
可用索引类型：

命令 描述
$table-&gt;primary(‘id’); 添加主键索引
$table-&gt;primary([‘first’, ‘last’]); 添加混合索引
$table-&gt;unique(‘email’); 添加唯一索引
$table-&gt;unique(‘state’, ‘my_index_name’); 指定自定义索引名称，如果不指定，laravel会自动给它起 个名字
$table-&gt;index(‘state’); 添加普通索引
删除索引：

命令 描述
$table-&gt;dropPrimary(‘users_id_primary’); 从 “users”表中删除主键索引
$table-&gt;dropUnique(‘users_email_unique’); 从 “users”表中删除唯一索引
$table-&gt;dropIndex(‘geo_state_index’); 从 “geo”表中删除普通索引
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨域]]></title>
    <link href="jythons.github.io/16570024842451.html"/>
    <updated>2022-07-05T14:28:04+08:00</updated>
    <id>jythons.github.io/16570024842451.html</id>
    <content type="html"><![CDATA[
<p>CORS是一个W3C标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）。
它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。
本文详细介绍CORS的内部机制。</p>
<h2><a id="%E4%B8%80%E3%80%81%E7%AE%80%E4%BB%8B" class="anchor" aria-hidden="true" href="#%E4%B8%80%E3%80%81%E7%AE%80%E4%BB%8B"><span class="octicon octicon-link"></span></a>一、简介</h2>
<p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<h2><a id="%E4%BA%8C%E3%80%81%E4%B8%A4%E7%A7%8D%E8%AF%B7%E6%B1%82" class="anchor" aria-hidden="true" href="#%E4%BA%8C%E3%80%81%E4%B8%A4%E7%A7%8D%E8%AF%B7%E6%B1%82"><span class="octicon octicon-link"></span></a>二、两种请求</h2>
<p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
<p>只要同时满足以下两大条件，就属于简单请求。</p>
<p>（1) 请求方法是以下三种方法之一：</p>
<pre class="line-numbers"><code>HEAD
GET
POST
</code></pre>
<p>（2）HTTP的头信息不超出以下几种字段：</p>
<pre class="line-numbers"><code>Accept
Accept-Language
Content-Language
Last-Event-ID
</code></pre>
<p>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain
这是为了兼容表单（form），因为历史上表单一直可以发出跨域请求。AJAX 的跨域设计就是，只要表单可以发，AJAX 就可以直接发。</p>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理，是不一样的。</p>
<h2><a id="%E4%B8%89%E3%80%81%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82" class="anchor" aria-hidden="true" href="#%E4%B8%89%E3%80%81%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82"><span class="octicon octicon-link"></span></a>三、简单请求</h2>
<h3><a id="3-1%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B" class="anchor" aria-hidden="true" href="#3-1%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B"><span class="octicon octicon-link"></span></a>3.1 基本流程</h3>
<p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p>
<p>下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。</p>
<pre class="line-numbers"><code>GET /cors HTTP/1.1
Origin: http://api.bob.com
Host: api.alice.com
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
</code></pre>
<p>上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>
<p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p>
<p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>
<p>Access-Control-Allow-Origin: <a href="http://api.bob.com">http://api.bob.com</a>
Access-Control-Allow-Credentials: true
Access-Control-Expose-Headers: FooBar
Content-Type: text/html; charset=utf-8
上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头。</p>
<p>（1）Access-Control-Allow-Origin</p>
<p>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p>
<p>（2）Access-Control-Allow-Credentials</p>
<p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p>
<p>（3）Access-Control-Expose-Headers</p>
<p>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader('FooBar')可以返回FooBar字段的值。</p>
<h3><a id="3-2-withcredentials%E5%B1%9E%E6%80%A7" class="anchor" aria-hidden="true" href="#3-2-withcredentials%E5%B1%9E%E6%80%A7"><span class="octicon octicon-link"></span></a>3.2 withCredentials 属性</h3>
<p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。</p>
<p>Access-Control-Allow-Credentials: true</p>
<p>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</p>
<p>var xhr = new XMLHttpRequest();
xhr.withCredentials = true;
否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>
<p>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p>
<p>xhr.withCredentials = false;
需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p>
<h2><a id="%E5%9B%9B%E3%80%81%E9%9D%9E%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82" class="anchor" aria-hidden="true" href="#%E5%9B%9B%E3%80%81%E9%9D%9E%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82"><span class="octicon octicon-link"></span></a>四、非简单请求</h2>
<h3><a id="4-1%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82" class="anchor" aria-hidden="true" href="#4-1%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82"><span class="octicon octicon-link"></span></a>4.1 预检请求</h3>
<p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</p>
<p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为&quot;预检&quot;请求（preflight）。</p>
<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p>
<p>下面是一段浏览器的JavaScript脚本。</p>
<pre class="line-numbers"><code>var url = 'http://api.alice.com/cors';
var xhr = new XMLHttpRequest();
xhr.open('PUT', url, true);
xhr.setRequestHeader('X-Custom-Header', 'value');
xhr.send();
</code></pre>
<p>上面代码中，HTTP请求的方法是PUT，并且发送一个自定义头信息X-Custom-Header。</p>
<p>浏览器发现，这是一个非简单请求，就自动发出一个&quot;预检&quot;请求，要求服务器确认可以这样请求。下面是这个&quot;预检&quot;请求的HTTP头信息。</p>
<pre class="line-numbers"><code>OPTIONS /cors HTTP/1.1
Origin: http://api.bob.com
Access-Control-Request-Method: PUT
Access-Control-Request-Headers: X-Custom-Header
Host: api.alice.com
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
</code></pre>
<p>&quot;预检&quot;请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</p>
<p>除了Origin字段，&quot;预检&quot;请求的头信息包括两个特殊字段。</p>
<p>（1）Access-Control-Request-Method</p>
<p>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</p>
<p>（2）Access-Control-Request-Headers</p>
<p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p>
<h3><a id="4-2%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9B%9E%E5%BA%94" class="anchor" aria-hidden="true" href="#4-2%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9B%9E%E5%BA%94"><span class="octicon octicon-link"></span></a>4.2 预检请求的回应</h3>
<p>服务器收到&quot;预检&quot;请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p>
<pre class="line-numbers"><code>HTTP/1.1 200 OK
Date: Mon, 01 Dec 2008 01:15:39 GMT
Server: Apache/2.0.61 (Unix)
Access-Control-Allow-Origin: http://api.bob.com
Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Headers: X-Custom-Header
Content-Type: text/html; charset=utf-8
Content-Encoding: gzip
Content-Length: 0
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
Content-Type: text/plain
</code></pre>
<p>上面的HTTP回应中，关键的是Access-Control-Allow-Origin字段，表示<a href="http://api.bob.com%E5%8F%AF%E4%BB%A5%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E3%80%82%E8%AF%A5%E5%AD%97%E6%AE%B5%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%AE%BE%E4%B8%BA%E6%98%9F%E5%8F%B7%EF%BC%8C%E8%A1%A8%E7%A4%BA%E5%90%8C%E6%84%8F%E4%BB%BB%E6%84%8F%E8%B7%A8%E6%BA%90%E8%AF%B7%E6%B1%82%E3%80%82">http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</a></p>
<p>Access-Control-Allow-Origin: *
如果服务器否定了&quot;预检&quot;请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p>
<p>XMLHttpRequest cannot load <a href="http://api.alice.com">http://api.alice.com</a>.
Origin <a href="http://api.bob.com">http://api.bob.com</a> is not allowed by Access-Control-Allow-Origin.
服务器回应的其他CORS相关字段如下。</p>
<pre class="line-numbers"><code>Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Headers: X-Custom-Header
Access-Control-Allow-Credentials: true
Access-Control-Max-Age: 1728000
</code></pre>
<p>（1）Access-Control-Allow-Methods</p>
<p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&quot;预检&quot;请求。</p>
<p>（2）Access-Control-Allow-Headers</p>
<p>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在&quot;预检&quot;中请求的字段。</p>
<p>（3）Access-Control-Allow-Credentials</p>
<p>该字段与简单请求时的含义相同。</p>
<p>（4）Access-Control-Max-Age</p>
<p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p>
<h3><a id="4-3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%AD%A3%E5%B8%B8%E8%AF%B7%E6%B1%82%E5%92%8C%E5%9B%9E%E5%BA%94" class="anchor" aria-hidden="true" href="#4-3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%AD%A3%E5%B8%B8%E8%AF%B7%E6%B1%82%E5%92%8C%E5%9B%9E%E5%BA%94"><span class="octicon octicon-link"></span></a>4.3 浏览器的正常请求和回应</h3>
<p>一旦服务器通过了&quot;预检&quot;请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p>
<p>下面是&quot;预检&quot;请求之后，浏览器的正常CORS请求。</p>
<pre class="line-numbers"><code>PUT /cors HTTP/1.1
Origin: http://api.bob.com
Host: api.alice.com
X-Custom-Header: value
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
</code></pre>
<p>上面头信息的Origin字段是浏览器自动添加的。</p>
<p>下面是服务器正常的回应。</p>
<pre class="line-numbers"><code>Access-Control-Allow-Origin: http://api.bob.com
Content-Type: text/html; charset=utf-8
</code></pre>
<p>上面头信息中，Access-Control-Allow-Origin字段是每次回应都必定包含的。</p>
<h2><a id="%E4%BA%94%E3%80%81cookie%E7%9A%84secure%E3%80%81httponly%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE" class="anchor" aria-hidden="true" href="#%E4%BA%94%E3%80%81cookie%E7%9A%84secure%E3%80%81httponly%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE"><span class="octicon octicon-link"></span></a>五、cookie的secure、httponly属性设置</h2>
<p>1 secure属性
当设置为true时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该信息，所以不会被窃取到Cookie 的具体内容。</p>
<p>2 HttpOnly属性
如果在Cookie中设置了&quot;HttpOnly&quot;属性，那么通过程序(JS脚本、Applet等)将无法读取到Cookie信息，这样能有效的防止XSS攻击。</p>
<p>对于以上两个属性，
首先，secure属性是防止信息在传递的过程中被监听捕获后信息泄漏，HttpOnly属性的目的是防止程序获取cookie后进行攻击。</p>
<h2><a id="%E5%8F%82%E8%80%83" class="anchor" aria-hidden="true" href="#%E5%8F%82%E8%80%83"><span class="octicon octicon-link"></span></a>参考</h2>
<ul>
<li><a href="http://t.zoukankan.com/geniusxjq-p-4280022.html">http://t.zoukankan.com/geniusxjq-p-4280022.html</a></li>
<li><a href="https://www.csdn.net/tags/NtzaAg4sNjk1ODEtYmxvZwO0O0OO0O0O.html">https://www.csdn.net/tags/NtzaAg4sNjk1ODEtYmxvZwO0O0OO0O0O.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成本地ssl签名工具：mkcert]]></title>
    <link href="jythons.github.io/16569086965834.html"/>
    <updated>2022-07-04T12:24:56+08:00</updated>
    <id>jythons.github.io/16569086965834.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80" class="anchor" aria-hidden="true" href="#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80"><span class="octicon octicon-link"></span></a>下载地址</h2>
<pre class="line-numbers"><code>https://github.com/FiloSottile/mkcert/releases
</code></pre>
<h2><a id="%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true" href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95"><span class="octicon octicon-link"></span></a>使用方法</h2>
<pre class="line-numbers"><code class="language-shell">// 安装证书
mkcert -install

// 生成证书
mkcert 域名 [IP]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IDEA创建项目连接超时]]></title>
    <link href="jythons.github.io/16561693995402.html"/>
    <updated>2022-06-25T23:03:19+08:00</updated>
    <id>jythons.github.io/16561693995402.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" class="anchor" aria-hidden="true" href="#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95"><span class="octicon octicon-link"></span></a>解决办法</h2>
<p>将<a href="https://start.spring.io">https://start.spring.io</a> 替换成 <a href="https://start.aliyun.com">https://start.aliyun.com</a> 即可</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anaconda基本使用]]></title>
    <link href="jythons.github.io/16534643173913.html"/>
    <updated>2022-05-25T15:38:37+08:00</updated>
    <id>jythons.github.io/16534643173913.html</id>
    <content type="html"><![CDATA[
<p>1.切换Python环境命令</p>
<pre class="line-numbers"><code>conda activate python2
</code></pre>
<p>2.获取环境列表</p>
<pre class="line-numbers"><code>conda env list
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel 获取目录方法]]></title>
    <link href="jythons.github.io/16518882443295.html"/>
    <updated>2022-05-07T09:50:44+08:00</updated>
    <id>jythons.github.io/16518882443295.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code>base_path()    //站点根目录
app_path()     //app目录
public_path()  //public目录
storage_path()  //storage 目录
resource_path()  //resources 目录
config_path()    //config 目录
database_path()  //database 目录
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 7 防火墙开启/关闭]]></title>
    <link href="jythons.github.io/16502914652460.html"/>
    <updated>2022-04-18T22:17:45+08:00</updated>
    <id>jythons.github.io/16502914652460.html</id>
    <content type="html"><![CDATA[
<p>CentOS 7.0默认使用的是firewall作为防火墙
使用systemctl来管理服务和程序，包括了service和chkconfig</p>
<p>1、查看默认防火墙状态（关闭后显示not running，开启后显示running）</p>
<p>firewall-cmd --state</p>
<p>2、检查防火墙的状态</p>
<p>systemctl list-unit-files|grep firewalld.service</p>
<p>或者：</p>
<p>systemctl status firewalld.service</p>
<p>3、开启防火墙</p>
<p>systemctl start firewalld.service --启动firewall</p>
<p>systemctl enable firewalld.service --开机时启动firewall</p>
<p>4、关闭防火墙：</p>
<p>systemctl stop firewalld.service --停止firewall</p>
<p>systemctl disable firewalld.service --禁止firewall开机启动</p>
<p>5、重启防火墙</p>
<p>systemctl restart firewalld.service</p>
<p>6、查看防火墙是否开机自启</p>
<p>systemctl is-enabled firewalld.service;echo $? enabled --自启</p>
<p>或者：
systemctl is-enabled firewalld.service;echo $? disabled --不自启</p>
<p>7、查看已启动的服务列表</p>
<p>systemctl list-unit-files|grep enabled</p>
<p>8、开启端口</p>
<p>firewall-cmd --zone=public --add-port=80/tcp --permanent</p>
<p>命令含义：
–zone #作用域
–add-port=80/tcp #添加端口，格式为：端口/通讯协议
–permanent #永久生效，没有此参数重启后失效</p>
<p>9、查看已经开放的端口</p>
<p>firewall-cmd --list-port</p>
<p>10、屏蔽FirewallD服务</p>
<p>systemctl mask firewalld</p>
<p>还可以通过创建一个firewall.service到/dev/null的符号连接来屏蔽防火墙服务。</p>
<p>11、反屏蔽FirewallD服务</p>
<p>systemctl unmask firewalld</p>
<p>这是反屏蔽FirewallD服务，它会移除屏蔽FirewallD服务时创建的符号链接，故能重新启用服务。</p>
<p>12、检查是否已安装防火墙</p>
<p>yum install firewalld firewall-config</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小程序登录授权]]></title>
    <link href="jythons.github.io/16472675086135.html"/>
    <updated>2022-03-14T22:18:28+08:00</updated>
    <id>jythons.github.io/16472675086135.html</id>
    <content type="html"><![CDATA[
<p>小程序登录授权时，需要先调用wx.login()方法，在调用获取用户信息方法，否则后端验签不通过</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringBoot启动报错：Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required]]></title>
    <link href="jythons.github.io/16472219555526.html"/>
    <updated>2022-03-14T09:39:15+08:00</updated>
    <id>jythons.github.io/16472219555526.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%8E%9F%E5%9B%A0" class="anchor" aria-hidden="true" href="#%E5%8E%9F%E5%9B%A0"><span class="octicon octicon-link"></span></a>原因</h2>
<p>Mybatis高版本取消了自动注入SqlSessionFactory 和 SqlSessionTemplate。</p>
<h2><a id="%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" class="anchor" aria-hidden="true" href="#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95"><span class="octicon octicon-link"></span></a>解决办法</h2>
<p>添加一下依赖即可解决：</p>
<pre class="line-numbers"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.1.9&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 18.04 Mysql每次访问需要加sudo的问题]]></title>
    <link href="jythons.github.io/16468191777738.html"/>
    <updated>2022-03-09T17:46:17+08:00</updated>
    <id>jythons.github.io/16468191777738.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E4%BF%AE%E6%94%B9-root%E7%94%A8%E6%88%B7" class="anchor" aria-hidden="true" href="#1%E4%BF%AE%E6%94%B9-root%E7%94%A8%E6%88%B7"><span class="octicon octicon-link"></span></a>1.修改root用户</h2>
<pre class="line-numbers"><code class="language-sql">mysql&gt; use mysql;
mysql&gt; select User,Host,plugin from user;
</code></pre>
<p>查看root用户权限，是否是<code>mysql_native_password</code>，如果不是，则将<code>auth_sock</code>改为<code>mysql_native_password</code></p>
<pre class="line-numbers"><code class="language-sql">mysql&gt; update user set plugin='mysql_native_password' where user='root'; 
</code></pre>
<p>或者习性下面语句，这样就不需要执行第二步的内容了</p>
<pre class="line-numbers"><code class="language-sql">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
</code></pre>
<h2><a id="2%E4%BF%AE%E6%94%B9%E6%88%96%E8%80%85%E8%AE%BE%E7%BD%AE-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81" class="anchor" aria-hidden="true" href="#2%E4%BF%AE%E6%94%B9%E6%88%96%E8%80%85%E8%AE%BE%E7%BD%AE-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81"><span class="octicon octicon-link"></span></a>2.修改或者设置root用户密码</h2>
<p>首先用debian-sys-maint登录，密码在/etc/mysql/debian.cnf文件</p>
<pre class="line-numbers"><code class="language-sql">mysql&gt; mysql -u debian-sys-maint -p
</code></pre>
<p>然后修改root密码（密码可与之前的一样）：</p>
<pre class="line-numbers"><code class="language-sql">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<p>然后，quit;退出。</p>
<p>经过这两步之后便可以使用 mysql -u root -p登录 Mysql， 不需要带上sudo.</p>
<h2><a id="%E5%8F%82%E8%80%83" class="anchor" aria-hidden="true" href="#%E5%8F%82%E8%80%83"><span class="octicon octicon-link"></span></a>参考</h2>
<p><a href="https://blog.csdn.net/zlf1227/article/details/91808443?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_antiscan_v2&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">Ubuntu 18.04 Mysql每次访问需要加sudo的问题</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql免密登录]]></title>
    <link href="jythons.github.io/16468151277290.html"/>
    <updated>2022-03-09T16:38:47+08:00</updated>
    <id>jythons.github.io/16468151277290.html</id>
    <content type="html"><![CDATA[
<p>解决方法：</p>
<pre class="line-numbers"><code>sudo vim /etc/mysql/my.cnf
</code></pre>
<p>添加：</p>
<pre class="line-numbers"><code>[mysqld]
skip-grant-tables
</code></pre>
<p>保存，退出。
然后执行以下两条命令来重启mysql服务：</p>
<pre class="line-numbers"><code>service mysqld stop
service mysqld start
</code></pre>
<p>或者直接执行重启服务的命令:</p>
<pre class="line-numbers"><code>service mysqld restart
</code></pre>
<p>重启完以后，上面对配置的修改才正式生效，这时候再登录就不用加sudo了。</p>
<p>原文链接：<a href="https://blog.csdn.net/BigData_Mining/article/details/107318193">https://blog.csdn.net/BigData_Mining/article/details/107318193</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基本SQL语句]]></title>
    <link href="jythons.github.io/16468073925154.html"/>
    <updated>2022-03-09T14:29:52+08:00</updated>
    <id>jythons.github.io/16468073925154.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%AD%97%E7%AC%A6%E9%9B%86" class="anchor" aria-hidden="true" href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%AD%97%E7%AC%A6%E9%9B%86"><span class="octicon octicon-link"></span></a>创建数据库并设置字符集</h2>
<pre class="line-numbers"><code class="language-sql">CREATE DATABASE `carlife` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装MySQL]]></title>
    <link href="jythons.github.io/16468072722854.html"/>
    <updated>2022-03-09T14:27:52+08:00</updated>
    <id>jythons.github.io/16468072722854.html</id>
    <content type="html"><![CDATA[
<p><a href="https://blog.csdn.net/weixx3/article/details/80782479">https://blog.csdn.net/weixx3/article/details/80782479</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下配置Java环境]]></title>
    <link href="jythons.github.io/16467977694477.html"/>
    <updated>2022-03-09T11:49:29+08:00</updated>
    <id>jythons.github.io/16467977694477.html</id>
    <content type="html"><![CDATA[
<h2><a id="sdk%E4%B8%8B%E8%BD%BD" class="anchor" aria-hidden="true" href="#sdk%E4%B8%8B%E8%BD%BD"><span class="octicon octicon-link"></span></a>SDK 下载</h2>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<h2><a id="%E4%B8%BA%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AEjava%E7%8E%AF%E5%A2%83" class="anchor" aria-hidden="true" href="#%E4%B8%BA%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AEjava%E7%8E%AF%E5%A2%83"><span class="octicon octicon-link"></span></a>为所有用户配置Java环境</h2>
<p><strong>1.解压安装包jdk-8u202-linux-x64-demos.tar.gz</strong>
<code>tar -zxvf jdk-8u202-linux-x64-demos.tar.gz</code></p>
<p><strong>2.将解压后的文件移到/usr/local目录下</strong>
<code>sudo mv ~/jdk1.8.0_202 /usr/local</code></p>
<p><strong>3.切换到/usr/local目录下</strong></p>
<p><code>cd /usr/local</code></p>
<p><strong>4.配置java环境变量</strong></p>
<blockquote>
<p>这里是将环境变量配置在etc/profile，即为所有用户配置JDK环境。</p>
</blockquote>
<p>使用命令打开/etc/profile文件<br />
<code>sudo vim /etc/profile</code></p>
<p>在末尾添加以下几行文字：</p>
<pre class="line-numbers"><code>export JAVA_HOME=/usr/lib/jdk/jdk1.8.0_202
export JRE_HOME=${JAVA_HOME}/jre    
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib    
export PATH=${JAVA_HOME}/bin:$PATH
</code></pre>
<p>使用如下命令使配置立即生效:<br />
<code> source /etc/profile</code></p>
<h2><a id="%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F" class="anchor" aria-hidden="true" href="#%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F"><span class="octicon octicon-link"></span></a>测试是否安装成功</h2>
<p>在终端输入，出现版本号说明安装成功。<br />
<code>java -version</code></p>
<p><img src="media/16467977694477/16467981831958.jpg" alt="" /></p>
<h2><a id="%E5%8F%82%E8%80%83" class="anchor" aria-hidden="true" href="#%E5%8F%82%E8%80%83"><span class="octicon octicon-link"></span></a>参考</h2>
<p>1.<a href="https://www.cnblogs.com/lfri/p/10437266.html">Ubuntu 16.04下Java环境安装与配置</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux日常使用命令记录]]></title>
    <link href="jythons.github.io/16467960240261.html"/>
    <updated>2022-03-09T11:20:24+08:00</updated>
    <id>jythons.github.io/16467960240261.html</id>
    <content type="html"><![CDATA[
<p><strong>1.设置<code>crontab -e</code>的编辑器为vim</strong></p>
<blockquote>
<p>$ EDITOR=vim<br />
$ export EDITOR</p>
</blockquote>
<p><strong>2.scp上传到带有指定端口号的服务器</strong></p>
<blockquote>
<p>scp -P 服务器端口号 本地文件地址 用户名@服务器地址:服务器路径</p>
</blockquote>
<p><strong>3.开启crontab日志</strong></p>
<blockquote>
<p>vim /etc/rsyslog.d/50-default.conf<br />
将cron.*这一行前的注释打开<br />
然后重启sudo  service rsyslog  restart</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel使用ClickHouse数据库]]></title>
    <link href="jythons.github.io/16467194160892.html"/>
    <updated>2022-03-08T14:03:36+08:00</updated>
    <id>jythons.github.io/16467194160892.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>ClickHouse<a href="https://clickhouse.tech/docs/zh/">中文文档</a></p>
</blockquote>
<h2><a id="%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true" href="#%E5%AE%89%E8%A3%85"><span class="octicon octicon-link"></span></a>安装</h2>
<p><strong>1.使用composer安装ClickHouse依赖</strong></p>
<pre class="line-numbers"><code class="language-php">composer require the-tinderbox/clickhouse-builder
</code></pre>
<p><strong>2.在config/app.php添加依赖</strong></p>
<pre class="line-numbers"><code class="language-php">'providers' =&gt; [
    ...
    Tinderbox\ClickhouseBuilder\Integrations\Laravel\ClickhouseServiceProvider::class,
    ...
]
</code></pre>
<p><strong>3.连接配置</strong></p>
<pre class="line-numbers"><code class="language-php">'connections' =&gt; [
    'clickhouse' =&gt; [
        'driver' =&gt; 'clickhouse',
        'host' =&gt; 'ip',
        'port' =&gt; '',
        'database' =&gt; '',
        'username' =&gt; '',
        'password' =&gt; '',
        'options' =&gt; [
            'timeout' =&gt; 10,
            'protocol' =&gt; 'https'
        ]
    ]
]
</code></pre>
<h2><a id="%E4%BD%BF%E7%94%A8" class="anchor" aria-hidden="true" href="#%E4%BD%BF%E7%94%A8"><span class="octicon octicon-link"></span></a>使用</h2>
<blockquote>
<p>使用方式基本与MySQL使用的方式一致</p>
</blockquote>
<pre class="line-numbers"><code class="language-php">DB::connection('clickhouse')-&gt;table(表名)-&gt;select(raw(&quot;sum(click_cnt) as click_cnt&quot;), &quot;zone_id&quot;);;

DB::connection('clickhouse')-&gt;table($table)-&gt;insert($popDataToArr);

</code></pre>
<h2><a id="%E5%8F%82%E8%80%83" class="anchor" aria-hidden="true" href="#%E5%8F%82%E8%80%83"><span class="octicon octicon-link"></span></a>参考</h2>
<blockquote>
<p><a href="https://blog.csdn.net/qq_32404231/article/details/118930322">https://blog.csdn.net/qq_32404231/article/details/118930322</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel 使用kafka]]></title>
    <link href="jythons.github.io/16467056808644.html"/>
    <updated>2022-03-08T10:14:40+08:00</updated>
    <id>jythons.github.io/16467056808644.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82" class="anchor" aria-hidden="true" href="#%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82"><span class="octicon octicon-link"></span></a>安装环境要求</h2>
<ul>
<li>PHP 版本大于 7.0</li>
<li>Kafka Server 版本大于 0.8.0</li>
<li>消费模块 Kafka Server 版本需要大于 0.9.0</li>
</ul>
<h2><a id="%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true" href="#%E5%AE%89%E8%A3%85"><span class="octicon octicon-link"></span></a>安装</h2>
<p>使用 Composer 安装<br />
添加 composer 依赖 nmred/kafka-php 到项目的   composer.json 文件中即可，如:</p>
<pre class="line-numbers"><code class="language-json">&quot;require&quot;: {
   &quot;php&quot;: &quot;&gt;=5.6.4&quot;,
   &quot;laravel/lumen-framework&quot;: &quot;5.4.*&quot;,
   &quot;nmred/kafka-php&quot;: &quot;dev-master&quot;
},
</code></pre>
<h2><a id="%E4%BD%BF%E7%94%A8" class="anchor" aria-hidden="true" href="#%E4%BD%BF%E7%94%A8"><span class="octicon octicon-link"></span></a>使用</h2>
<h3><a id="%E5%88%9B%E5%BB%BAkafkaservice" class="anchor" aria-hidden="true" href="#%E5%88%9B%E5%BB%BAkafkaservice"><span class="octicon octicon-link"></span></a>创建KafkaService</h3>
<pre class="line-numbers"><code class="language-php">&lt;?php
namespace App\Http\Services;
use Kafka;

class KafkaService
{
    public function __construct()
    {
        date_default_timezone_set('PRC');
    }

    /*
     * Produce
     */
    public function Producer($topic, $value , $url)
    {
        $config = \Kafka\ProducerConfig::getInstance();
        $config-&gt;setMetadataRefreshIntervalMs(10000);
        $config-&gt;setMetadataBrokerList($url);
        $config-&gt;setBrokerVersion('1.0.0');
        $config-&gt;setRequiredAck(1);
        $config-&gt;setIsAsyn(false);
        $config-&gt;setProduceInterval(500);
        $producer = new \Kafka\Producer(function () use($value,$topic){
            return [
                [
                    'topic' =&gt; $topic,
                    'value' =&gt; $value,
                    'key' =&gt; '',
                ],
            ];
        });
        $producer-&gt;success(function ($result){
            return &quot;success&quot;;
        });
        $producer-&gt;error(function ($errorCode){
            var_dump($errorCode);
        });
        $producer-&gt;send(true);
    }

    /*
     * Consumer
     */
    public function consumer($group,$topics , $url){
        $config = \Kafka\ConsumerConfig::getInstance();
        $config-&gt;setMetadataRefreshIntervalMs(500);
        $config-&gt;setMetadataBrokerList($url);
        $config-&gt;setGroupId($group);
        $config-&gt;setBrokerVersion('1.0.0');
        $config-&gt;setTopics([$topics]);
        $config-&gt;setOffsetReset('earliest');
        $consumer = new \Kafka\Consumer();
        $consumer-&gt;start(function($topic, $part, $message) {
            echo &quot;receive a message...\n&quot;;
            app('consumerKafka')-&gt;consumerData($message['message']['value']);  //你的接收处理逻辑
            var_dump($message['message']['value']);
        });
    }
}
</code></pre>
<h3><a id="%E6%89%A7%E8%A1%8Cproduce%E6%96%B9%E6%B3%95%E7%94%9F%E4%BA%A7%E6%B6%88%E6%81%AF" class="anchor" aria-hidden="true" href="#%E6%89%A7%E8%A1%8Cproduce%E6%96%B9%E6%B3%95%E7%94%9F%E4%BA%A7%E6%B6%88%E6%81%AF"><span class="octicon octicon-link"></span></a>执行produce方法生产消息</h3>
<pre class="line-numbers"><code class="language-php">&lt;?php
namespace App\Http\Services;
use App\Http\Services\KafkaService;
class ProduceService
{
 public function produce()
    {
        $topic = env('topic_test'); //配置在env中
        $url = env('kafka_url_test'); //配置在env中
        $value =
            [
                'code' =&gt; 'test',
                'data_type' =&gt; 'personal',
                'action' =&gt; 'update',
                'data' =&gt;
                    [
                        'id' =&gt; 1,
                        'name' =&gt; 'tom',
                        'gender' =&gt; 2
                    ],
                'redirect_url' =&gt; '',
                'operator' =&gt; 'system',
            ];
        $value = json_encode ($value, JSON_FORCE_OBJECT );
        $kafka = new KafkaService();
        $kafka-&gt;Producer($topic, $value , $url);
    }

}
</code></pre>
<h3><a id="%E6%89%A7%E8%A1%8Cphp-artisan-consumer-kafka%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF" class="anchor" aria-hidden="true" href="#%E6%89%A7%E8%A1%8Cphp-artisan-consumer-kafka%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF"><span class="octicon octicon-link"></span></a>执行php artisan consumer:kafka 消费消息</h3>
<pre class="line-numbers"><code class="language-php">&lt;?php
namespace App\Console\Commands;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Redis;

class ConsumerKafka extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'consumer:kafka';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '处理异步kafka消息';

    /**
     * Create a new command instance.
     */
    public function __construct()
    {
        parent::__construct();
    }
    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $this-&gt;log('开始监听消息...');
        app('kafkaService')-&gt;consumer($group=env('KAFKA_GROUP'),$topics =env('KAFKA_TOPIC'), $url=env('KAFKA_URL'));
        return $this;
    }

    private function log($msg = '')
    {
        if (!$msg) {
            return $this;
        }
        if (php_sapi_name() == 'cli') {
            echo $msg, PHP_EOL;
        }
        app('myLog')-&gt;lumenLog($msg, 'kafka_consumer');
        return $this;
    }
}
</code></pre>
<h2><a id="%E5%8F%82%E8%80%83" class="anchor" aria-hidden="true" href="#%E5%8F%82%E8%80%83"><span class="octicon octicon-link"></span></a>参考</h2>
<blockquote>
<p><a href="https://learnku.com/articles/15176/laravel-implementation-of-kafka-message-push-and-receive-processing">https://learnku.com/articles/15176/laravel-implementation-of-kafka-message-push-and-receive-processing</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[反转义字符串方法]]></title>
    <link href="jythons.github.io/16463003273433.html"/>
    <updated>2022-03-03T17:38:47+08:00</updated>
    <id>jythons.github.io/16463003273433.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-java">StringEscapeUtils.unescapeJava()
</code></pre>
<h2><a id="%E5%8F%82%E8%80%83" class="anchor" aria-hidden="true" href="#%E5%8F%82%E8%80%83"><span class="octicon octicon-link"></span></a>参考</h2>
<p>1.<a href="https://blog.csdn.net/weixin_42515336/article/details/114060354">https://blog.csdn.net/weixin_42515336/article/details/114060354</a></p>

]]></content>
  </entry>
  
</feed>
